"use strict";function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _express = _interopRequireDefault(require("express"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _User = _interopRequireDefault(require("../model/User"));
var _Company = _interopRequireDefault(require("../model/Company"));
var _AssessmentFramework = _interopRequireDefault(require("../model/AssessmentFramework"));
var _Workspace = _interopRequireDefault(require("../model/Workspace"));
var _Contact = _interopRequireDefault(require("../model/Contact"));
var _Category = _interopRequireDefault(require("../model/Category"));
var _Primitive = _interopRequireDefault(require("../model/Primitive"));
var _PrimitivesParser = _interopRequireDefault(require("../PrimitivesParser"));
var _storage = require("@google-cloud/storage");
var _stream = require("stream");
var _promises = require("stream/promises");
var _google_helper = require("../google_helper");
var _openai_helper = _interopRequireDefault(require("../openai_helper"));
var _SharedFunctions = require("../SharedFunctions");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _regeneratorRuntime() {"use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime = function _regeneratorRuntime() {return exports;};var exports = {},Op = Object.prototype,hasOwn = Op.hasOwnProperty,defineProperty = Object.defineProperty || function (obj, key, desc) {obj[key] = desc.value;},$Symbol = "function" == typeof Symbol ? Symbol : {},iteratorSymbol = $Symbol.iterator || "@@iterator",asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";function define(obj, key, value) {return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key];}try {define({}, "");} catch (err) {define = function define(obj, key, value) {return obj[key] = value;};}function wrap(innerFn, outerFn, self, tryLocsList) {var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,generator = Object.create(protoGenerator.prototype),context = new Context(tryLocsList || []);return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator;}function tryCatch(fn, obj, arg) {try {return { type: "normal", arg: fn.call(obj, arg) };} catch (err) {return { type: "throw", arg: err };}}exports.wrap = wrap;var ContinueSentinel = {};function Generator() {}function GeneratorFunction() {}function GeneratorFunctionPrototype() {}var IteratorPrototype = {};define(IteratorPrototype, iteratorSymbol, function () {return this;});var getProto = Object.getPrototypeOf,NativeIteratorPrototype = getProto && getProto(getProto(values([])));NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);function defineIteratorMethods(prototype) {["next", "throw", "return"].forEach(function (method) {define(prototype, method, function (arg) {return this._invoke(method, arg);});});}function AsyncIterator(generator, PromiseImpl) {function invoke(method, arg, resolve, reject) {var record = tryCatch(generator[method], generator, arg);if ("throw" !== record.type) {var result = record.arg,value = result.value;return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {invoke("next", value, resolve, reject);}, function (err) {invoke("throw", err, resolve, reject);}) : PromiseImpl.resolve(value).then(function (unwrapped) {result.value = unwrapped, resolve(result);}, function (error) {return invoke("throw", error, resolve, reject);});}reject(record.arg);}var previousPromise;defineProperty(this, "_invoke", { value: function value(method, arg) {function callInvokeWithMethodAndArg() {return new PromiseImpl(function (resolve, reject) {invoke(method, arg, resolve, reject);});}return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();} });}function makeInvokeMethod(innerFn, self, context) {var state = "suspendedStart";return function (method, arg) {if ("executing" === state) throw new Error("Generator is already running");if ("completed" === state) {if ("throw" === method) throw arg;return doneResult();}for (context.method = method, context.arg = arg;;) {var delegate = context.delegate;if (delegate) {var delegateResult = maybeInvokeDelegate(delegate, context);if (delegateResult) {if (delegateResult === ContinueSentinel) continue;return delegateResult;}}if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {if ("suspendedStart" === state) throw state = "completed", context.arg;context.dispatchException(context.arg);} else "return" === context.method && context.abrupt("return", context.arg);state = "executing";var record = tryCatch(innerFn, self, context);if ("normal" === record.type) {if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;return { value: record.arg, done: context.done };}"throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);}};}function maybeInvokeDelegate(delegate, context) {var methodName = context.method,method = delegate.iterator[methodName];if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;var record = tryCatch(method, delegate.iterator, context.arg);if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;var info = record.arg;return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);}function pushTryEntry(locs) {var entry = { tryLoc: locs[0] };1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);}function resetTryEntry(entry) {var record = entry.completion || {};record.type = "normal", delete record.arg, entry.completion = record;}function Context(tryLocsList) {this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);}function values(iterable) {if (iterable) {var iteratorMethod = iterable[iteratorSymbol];if (iteratorMethod) return iteratorMethod.call(iterable);if ("function" == typeof iterable.next) return iterable;if (!isNaN(iterable.length)) {var i = -1,next = function next() {for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;return next.value = undefined, next.done = !0, next;};return next.next = next;}}return { next: doneResult };}function doneResult() {return { value: undefined, done: !0 };}return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {var ctor = "function" == typeof genFun && genFun.constructor;return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));}, exports.mark = function (genFun) {return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;}, exports.awrap = function (arg) {return { __await: arg };}, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {return this;}), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {void 0 === PromiseImpl && (PromiseImpl = Promise);var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {return result.done ? result.value : iter.next();});}, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {return this;}), define(Gp, "toString", function () {return "[object Generator]";}), exports.keys = function (val) {var object = Object(val),keys = [];for (var key in object) keys.push(key);return keys.reverse(), function next() {for (; keys.length;) {var key = keys.pop();if (key in object) return next.value = key, next.done = !1, next;}return next.done = !0, next;};}, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) {if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);}, stop: function stop() {this.done = !0;var rootRecord = this.tryEntries[0].completion;if ("throw" === rootRecord.type) throw rootRecord.arg;return this.rval;}, dispatchException: function dispatchException(exception) {if (this.done) throw exception;var context = this;function handle(loc, caught) {return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;}for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i],record = entry.completion;if ("root" === entry.tryLoc) return handle("end");if (entry.tryLoc <= this.prev) {var hasCatch = hasOwn.call(entry, "catchLoc"),hasFinally = hasOwn.call(entry, "finallyLoc");if (hasCatch && hasFinally) {if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);} else if (hasCatch) {if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);} else {if (!hasFinally) throw new Error("try statement without catch or finally");if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);}}}}, abrupt: function abrupt(type, arg) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {var finallyEntry = entry;break;}}finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);var record = finallyEntry ? finallyEntry.completion : {};return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);}, complete: function complete(record, afterLoc) {if ("throw" === record.type) throw record.arg;return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;}, finish: function finish(finallyLoc) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;}}, "catch": function _catch(tryLoc) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.tryLoc === tryLoc) {var record = entry.completion;if ("throw" === record.type) {var thrown = record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");}, delegateYield: function delegateYield(iterable, resultName, nextLoc) {return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel;} }, exports;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

var ObjectId = require('mongoose').Types.ObjectId;

var parser = (0, _PrimitivesParser["default"])();
var router = _express["default"].Router();

router.get('/', /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {return _regeneratorRuntime().wrap(function _callee$(_context) {while (1) switch (_context.prev = _context.next) {case 0:
          res.json({ up: true });case 1:case "end":return _context.stop();}}, _callee);}));return function (_x, _x2, _x3) {return _ref.apply(this, arguments);};}());

router.get('/avatarImage/:id', /*#__PURE__*/function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next) {var contactId, bucketName, storage, bucket, file, remoteReadStream;return _regeneratorRuntime().wrap(function _callee2$(_context2) {while (1) switch (_context2.prev = _context2.next) {case 0:
          contactId = req.params.id;
          bucketName = 'bucket-profiles-vf-cc';
          storage = new _storage.Storage({
            projectId: process.env.GOOGLE_PROJECT_ID
          });
          try {

            bucket = storage.bucket(bucketName);
            file = bucket.file(contactId);
            remoteReadStream = file.createReadStream().
            on('error', function (err) {
              console.log(err);
              res.status(501).json({ message: "Not found" });
              return;
            });
            res.set('Cache-Control', 'public, max-age=31557600');
            remoteReadStream.pipe(res);
          } catch (error) {
            res.status(501).json({ message: "Error" });
          }case 4:case "end":return _context2.stop();}}, _callee2);}));return function (_x4, _x5, _x6) {return _ref2.apply(this, arguments);};}());

router.get('/enrichContact', /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res, next) {var contactId, contact, company, _contact$name$split, _contact$name$split2, first_name, last_name, other, query, url, response, data, _query, _url, _response, _data, _query2, _url2, _response2, _data2;return _regeneratorRuntime().wrap(function _callee3$(_context3) {while (1) switch (_context3.prev = _context3.next) {case 0:
          contactId = req.query.contactId;_context3.prev = 1;_context3.next = 4;return (

            _Contact["default"].findOne({ _id: new ObjectId(contactId) }));case 4:contact = _context3.sent;if (

          contact.profile) {_context3.next = 36;break;}
          company = req.query.company;if (!
          company) {_context3.next = 34;break;}_contact$name$split =
          contact.name.split(" "), _contact$name$split2 = _slicedToArray(_contact$name$split, 3), first_name = _contact$name$split2[0], last_name = _contact$name$split2[1], other = _contact$name$split2[2];
          if (other) {
            first_name = last_name;
            last_name = other;
          }
          console.log(first_name);
          console.log(last_name);
          console.log(company);
          query = new URLSearchParams({
            'enrich_profile': "skip",
            'company_domain': company,
            'first_name': first_name,
            'lasst_name': last_name
          }).toString();
          url = "https://nubela.co/proxycurl/api/linkedin/profile/resolve?".concat(query);_context3.next = 17;return (
            fetch(url, {
              method: 'GET',
              headers: {
                'Authorization': "Bearer ".concat(process.env.PROXYCURL_KEY)
              }
            }));case 17:response = _context3.sent;

          console.log('send');
          console.log(query);_context3.next = 22;return (
            response.json());case 22:data = _context3.sent;if (!
          data.url) {_context3.next = 30;break;}
          contact.profile = data.url;
          contact.markModified("profile");_context3.next = 28;return (
            contact.save());case 28:_context3.next = 32;break;case 30:

          res.json({ success: false, reason: "No profile url and no company url found" });return _context3.abrupt("return");case 32:_context3.next = 36;break;case 34:




          res.json({ success: false, reason: "No profile url or company name" });return _context3.abrupt("return");case 36:if (!(



          !contact.profileInfo && contact.profile)) {_context3.next = 66;break;}_context3.prev = 37;


          _query = new URLSearchParams({
            url: contact.profile,
            fallback_to_cache: 'on-error',
            'use_cache': 'if-present',
            'skills': 'include',
            'inferred_salary': 'include',
            'personal_email': 'include',
            'personal_contact_number': 'include',
            'twitter_profile_id': 'include',
            'facebook_profile_id': 'include',
            'github_profile_id': 'include',
            'extra': 'include'
          }).toString();
          _url = "https://nubela.co/proxycurl/api/v2/linkedin?".concat(_query);_context3.next = 42;return (
            fetch(_url, {
              method: 'GET',
              headers: {
                'Authorization': "Bearer ".concat(process.env.PROXYCURL_KEY)
              }
            }));case 42:_response = _context3.sent;_context3.next = 45;return (

            _response.json());case 45:_data = _context3.sent;
          console.log(_data);
          res.json({ result: _data });
          contact.profileInfo = _data;_context3.next = 51;return (
            replicateURLtoStorage(_data.profile_pic_url, contact.id));case 51:contact.avatarPresent = _context3.sent;
          contact.avatarUrl = avatarUrl;
          contact.markModified("profileInfo");
          contact.markModified("avatarUrl");
          contact.markModified("avatarPresent");_context3.next = 58;return (
            contact.save());case 58:return _context3.abrupt("return");case 61:_context3.prev = 61;_context3.t0 = _context3["catch"](37);


          console.log(_context3.t0);
          res.json({ success: false, reason: _context3.t0.message });return _context3.abrupt("return");case 66:if (



          contact.avatarUrl) {_context3.next = 93;break;}_context3.prev = 67;


          _query2 = new URLSearchParams({ linkedin_person_profile_url: contact.profile }).toString();
          _url2 = "https://nubela.co/proxycurl/api/linkedin/person/profile-picture?".concat(_query2);_context3.next = 72;return (
            fetch(_url2, {
              method: 'GET',
              headers: {
                'Authorization': "Bearer ".concat(process.env.PROXYCURL_KEY)
              }
            }));case 72:_response2 = _context3.sent;_context3.next = 75;return (

            _response2.json());case 75:_data2 = _context3.sent;
          console.log(_data2);if (!
          _data2.tmp_profile_pic_url) {_context3.next = 84;break;}_context3.next = 80;return (
            replicateURLtoStorage(_data2.tmp_profile_pic_url, contact.id));case 80:contact.avatarPresent = _context3.sent;
          contact.markModified("avatarPresent");_context3.next = 84;return (
            contact.save());case 84:

          res.json({ result: _data2 });return _context3.abrupt("return");case 88:_context3.prev = 88;_context3.t1 = _context3["catch"](67);


          console.log(_context3.t1);
          res.json({ success: false, reason: _context3.t1.message });return _context3.abrupt("return");case 93:_context3.next = 98;break;case 95:_context3.prev = 95;_context3.t2 = _context3["catch"](1);





          res.json({ error: _context3.t2.message });case 98:case "end":return _context3.stop();}}, _callee3, null, [[1, 95], [37, 61], [67, 88]]);}));return function (_x7, _x8, _x9) {return _ref3.apply(this, arguments);};}());



router.get('/users', /*#__PURE__*/function () {var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee4$(_context4) {while (1) switch (_context4.prev = _context4.next) {case 0:_context4.prev = 0;_context4.next = 3;return (


            _User["default"].find({}));case 3:results = _context4.sent;
          res.json(results);_context4.next = 10;break;case 7:_context4.prev = 7;_context4.t0 = _context4["catch"](0);

          res.json({ error: _context4.t0 });case 10:case "end":return _context4.stop();}}, _callee4, null, [[0, 7]]);}));return function (_x10, _x11, _x12) {return _ref4.apply(this, arguments);};}());



router.get('/frameworks', /*#__PURE__*/function () {var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee5$(_context5) {while (1) switch (_context5.prev = _context5.next) {case 0:_context5.prev = 0;_context5.next = 3;return (

            _AssessmentFramework["default"].find({}));case 3:results = _context5.sent;
          res.json(results);_context5.next = 10;break;case 7:_context5.prev = 7;_context5.t0 = _context5["catch"](0);

          res.json({ error: _context5.t0 });case 10:case "end":return _context5.stop();}}, _callee5, null, [[0, 7]]);}));return function (_x13, _x14, _x15) {return _ref5.apply(this, arguments);};}());



router.get('/companies', /*#__PURE__*/function () {var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee6$(_context6) {while (1) switch (_context6.prev = _context6.next) {case 0:_context6.prev = 0;_context6.next = 3;return (


            _Company["default"].find({}));case 3:results = _context6.sent;
          res.json(results);_context6.next = 10;break;case 7:_context6.prev = 7;_context6.t0 = _context6["catch"](0);

          res.json({ error: _context6.t0 });case 10:case "end":return _context6.stop();}}, _callee6, null, [[0, 7]]);}));return function (_x16, _x17, _x18) {return _ref6.apply(this, arguments);};}());



router.get('/contacts', /*#__PURE__*/function () {var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee7$(_context7) {while (1) switch (_context7.prev = _context7.next) {case 0:_context7.prev = 0;_context7.next = 3;return (

            _Contact["default"].find({}));case 3:results = _context7.sent;
          res.json(results);_context7.next = 10;break;case 7:_context7.prev = 7;_context7.t0 = _context7["catch"](0);

          res.json({ error: _context7.t0 });case 10:case "end":return _context7.stop();}}, _callee7, null, [[0, 7]]);}));return function (_x19, _x20, _x21) {return _ref7.apply(this, arguments);};}());



router.get('/workspaces', /*#__PURE__*/function () {var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee8$(_context8) {while (1) switch (_context8.prev = _context8.next) {case 0:_context8.prev = 0;_context8.next = 3;return (


            _Workspace["default"].find({}));case 3:results = _context8.sent;
          res.json(results);_context8.next = 10;break;case 7:_context8.prev = 7;_context8.t0 = _context8["catch"](0);

          res.json({ error: _context8.t0 });case 10:case "end":return _context8.stop();}}, _callee8, null, [[0, 7]]);}));return function (_x22, _x23, _x24) {return _ref8.apply(this, arguments);};}());



router.get('/categories', /*#__PURE__*/function () {var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee9$(_context9) {while (1) switch (_context9.prev = _context9.next) {case 0:_context9.prev = 0;_context9.next = 3;return (


            _Category["default"].find({}));case 3:results = _context9.sent;
          res.json(results);_context9.next = 10;break;case 7:_context9.prev = 7;_context9.t0 = _context9["catch"](0);

          res.json({ error: _context9.t0 });case 10:case "end":return _context9.stop();}}, _callee9, null, [[0, 7]]);}));return function (_x25, _x26, _x27) {return _ref9.apply(this, arguments);};}());



router.get('/primitives', /*#__PURE__*/function () {var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(req, res, next) {var results;return _regeneratorRuntime().wrap(function _callee10$(_context10) {while (1) switch (_context10.prev = _context10.next) {case 0:_context10.prev = 0;_context10.next = 3;return (


            _Primitive["default"].find({}));case 3:results = _context10.sent;
          res.json(results);_context10.next = 10;break;case 7:_context10.prev = 7;_context10.t0 = _context10["catch"](0);

          res.json({ error: _context10.t0 });case 10:case "end":return _context10.stop();}}, _callee10, null, [[0, 7]]);}));return function (_x28, _x29, _x30) {return _ref10.apply(this, arguments);};}());





router.post('/remove_metric', /*#__PURE__*/function () {var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(req, res, next) {var data;return _regeneratorRuntime().wrap(function _callee11$(_context11) {while (1) switch (_context11.prev = _context11.next) {case 0:
          data = req.body;
          console.log("remove");
          console.log(data);_context11.prev = 3;_context11.next = 6;return (


            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.primitive),
              "metrics.id": data.id
            },
            {
              $pull: { "metrics": { id: data.id } },
              $unset: _defineProperty({}, "primitives.metrics.".concat(data.id), true)
            }));case 6:
          res.json({ success: true, id: data.id });_context11.next = 12;break;case 9:_context11.prev = 9;_context11.t0 = _context11["catch"](3);

          res.json(400, { error: _context11.t0.message });case 12:case "end":return _context11.stop();}}, _callee11, null, [[3, 9]]);}));return function (_x31, _x32, _x33) {return _ref11.apply(this, arguments);};}());


router.post('/update_metric', /*#__PURE__*/function () {var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(req, res, next) {var data;return _regeneratorRuntime().wrap(function _callee12$(_context12) {while (1) switch (_context12.prev = _context12.next) {case 0:
          data = req.body;_context12.prev = 1;_context12.next = 4;return (

            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.primitive),
              "metrics.id": data.id
            },
            {
              $set: {
                "metrics.$": {
                  id: data.id,
                  title: data.title,
                  type: data.type,
                  targets: data.targets,
                  path: data.type === "conversion" ? { results: 0 } : { metrics: data.id }
                }
              }
            }));case 4:
          res.json({ success: true, id: data.id });_context12.next = 10;break;case 7:_context12.prev = 7;_context12.t0 = _context12["catch"](1);

          res.json(400, { error: _context12.t0.message });case 10:case "end":return _context12.stop();}}, _callee12, null, [[1, 7]]);}));return function (_x34, _x35, _x36) {return _ref12.apply(this, arguments);};}());



router.post('/add_metric', /*#__PURE__*/function () {var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(req, res, next) {var data;return _regeneratorRuntime().wrap(function _callee13$(_context13) {while (1) switch (_context13.prev = _context13.next) {case 0:
          data = req.body;

          try {

            _Primitive["default"].findOneAndUpdate(
            { _id: data.primitive },
            [
            { "$addFields": { "newIndex": { "$add": [{ "$max": "$metrics.id" }, 1] } } },
            { "$set": { "metrics": {
                  "$concatArrays": [
                  { $ifNull: ["$metrics", []] },
                  [{
                    "id": { $ifNull: ["$newIndex", 0] },
                    title: data.title,
                    type: data.type,
                    targets: data.targets,
                    path: data.type === "conversion" ? { results: 0 } : { metrics: { $ifNull: ["$newIndex", 0] } }
                  }]] } } },
            { "$unset": "newIndex" }],

            { "new": true, upsert: false },
            function (err, doc) {
              if (err) {
                console.log(err);
              } else {
                console.o;
                var newId = Math.max.apply(Math, _toConsumableArray(doc.metrics.map(function (d) {return d.id;})));
                res.json({ success: true, id: newId });
              }
            });


          } catch (err) {
            res.json(400, { error: err.message });
          }case 2:case "end":return _context13.stop();}}, _callee13);}));return function (_x37, _x38, _x39) {return _ref13.apply(this, arguments);};}());


router.post('/primitive/:id/set_user', /*#__PURE__*/function () {var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(req, res, next) {var primitiveId, data, userId, mode, success;return _regeneratorRuntime().wrap(function _callee14$(_context14) {while (1) switch (_context14.prev = _context14.next) {case 0:
          primitiveId = req.params.id;
          data = req.body;
          console.log(data);
          userId = data.userId;
          mode = data.mode;
          success = false;_context14.prev = 6;if (!(



          mode === "add")) {_context14.next = 11;break;}_context14.next = 10;return (
            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.receiver),
              'user.other': { $nin: [userId] }
            },
            {
              $push: { 'user.other': { $nin: [userId] } }
            }));case 10:
          success = true;case 11:if (!(

          mode === "remove")) {_context14.next = 15;break;}_context14.next = 14;return (
            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.receiver),
              'user.other': { $in: [userId] }
            },
            {
              $pull: { 'user.other': { $nin: [userId] } }
            }));case 14:
          success = true;case 15:

          res.json({ success: success });_context14.next = 21;break;case 18:_context14.prev = 18;_context14.t0 = _context14["catch"](6);

          res.json(400, { error: _context14.t0.message });case 21:case "end":return _context14.stop();}}, _callee14, null, [[6, 18]]);}));return function (_x40, _x41, _x42) {return _ref14.apply(this, arguments);};}());


router.post('/set_field', /*#__PURE__*/function () {var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(req, res, next) {var data;return _regeneratorRuntime().wrap(function _callee15$(_context15) {while (1) switch (_context15.prev = _context15.next) {case 0:
          data = req.body;

          try {

            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.receiver)
            },
            {
              $set: _defineProperty({}, data.field, data.value)
            },
            { "new": true },
            function (err, doc) {
            });
            res.json({ success: true });
          } catch (err) {
            res.json(400, { error: err.message });
          }case 2:case "end":return _context15.stop();}}, _callee15);}));return function (_x43, _x44, _x45) {return _ref15.apply(this, arguments);};}());

router.post('/move_relationship', /*#__PURE__*/function () {var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(req, res, next) {var data, _Primitive$findOneAnd, fromPath, toPath;return _regeneratorRuntime().wrap(function _callee16$(_context16) {while (1) switch (_context16.prev = _context16.next) {case 0:
          data = req.body;_context16.prev = 1;


          fromPath = (0, _SharedFunctions.flattenPath)(data.from);
          toPath = (0, _SharedFunctions.flattenPath)(data.to);_context16.prev = 4;_context16.next = 7;return (

            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(data.target)
            },
            [{ $set: _defineProperty({}, "parentPrimitives.".concat(
              data.receiver),
              { $function: {
                  body: "function(arr){ arr = (arr || []).filter((p)=>(p != '".concat(fromPath, "') && (p != '").concat(toPath, "') ); arr.push('").concat(toPath, "'); return arr }"),
                  args: ["$parentPrimitives.".concat(data.receiver)],
                  lang: "js"
                } })

            }]));case 7:_context16.next = 12;break;case 9:_context16.prev = 9;_context16.t0 = _context16["catch"](4);throw (



            new Error(_context16.t0));case 12:_context16.next = 14;return (

            _Primitive["default"].findOneAndUpdate((_Primitive$findOneAnd = {

              "_id": new ObjectId(data.receiver) }, _defineProperty(_Primitive$findOneAnd,
            fromPath, { $in: [data.target] }), _defineProperty(_Primitive$findOneAnd,
            toPath, { $nin: [data.target] }), _Primitive$findOneAnd),

            {
              $pull: _defineProperty({}, fromPath, data.target),
              $push: _defineProperty({}, toPath, data.target)
            }));case 14:_context16.next = 19;break;case 16:_context16.prev = 16;_context16.t1 = _context16["catch"](1);

          res.json(400, { error: _context16.t1.message });case 19:case "end":return _context16.stop();}}, _callee16, null, [[1, 16], [4, 9]]);}));return function (_x46, _x47, _x48) {return _ref16.apply(this, arguments);};}());


router.post('/add_contact', /*#__PURE__*/function () {var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(req, res, next) {var data, newPrimitive, newId;return _regeneratorRuntime().wrap(function _callee17$(_context17) {while (1) switch (_context17.prev = _context17.next) {case 0:
          data = req.body;
          console.log(data);_context17.prev = 2;_context17.next = 5;return (


            _Contact["default"].create(data.data));case 5:newPrimitive = _context17.sent;
          newId = newPrimitive._id.toString();
          res.json({ success: true, id: newId });_context17.next = 13;break;case 10:_context17.prev = 10;_context17.t0 = _context17["catch"](2);

          res.json(400, { error: _context17.t0.message });case 13:case "end":return _context17.stop();}}, _callee17, null, [[2, 10]]);}));return function (_x49, _x50, _x51) {return _ref17.apply(this, arguments);};}());




var removeParentReference = /*#__PURE__*/function () {var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(target, parentId) {var updates;return _regeneratorRuntime().wrap(function _callee18$(_context18) {while (1) switch (_context18.prev = _context18.next) {case 0:if (
          target instanceof Object) {_context18.next = 4;break;}_context18.next = 3;return (
            _Primitive["default"].findOne({ "_id": new ObjectId(target) }));case 3:target = _context18.sent;case 4:_context18.prev = 4;




          updates = target.parentPrimitives[parentId].reduce(function (o, pp) {
            o[pp] = { $function: {
                body: "function(arr){ return arr ? arr.filter((p)=>p != '".concat(target.id, "') : undefined;}"),
                args: ["$".concat(pp)],
                lang: "js"
              } };
            return o;
          }, {});_context18.next = 8;return (

            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(parentId)
            },
            [{
              $set: updates
            }]));case 8:_context18.next = 13;break;case 10:_context18.prev = 10;_context18.t0 = _context18["catch"](4);throw _context18.t0;case 13:case "end":return _context18.stop();}}, _callee18, null, [[4, 10]]);}));return function removeParentReference(_x52, _x53) {return _ref18.apply(this, arguments);};}();







router.post('/remove_primitive', /*#__PURE__*/function () {var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(req, res, next) {var data, removed, _i2, _Object$keys, parentId, childPrimitiveIds, _iterator, _step, childId;return _regeneratorRuntime().wrap(function _callee19$(_context19) {while (1) switch (_context19.prev = _context19.next) {case 0:
          data = req.body;_context19.prev = 1;_context19.next = 4;return (


            _Primitive["default"].findOneAndDelete({ "_id": new ObjectId(data.id) }));case 4:removed = _context19.sent;_context19.prev = 5;if (!


          removed.parentPrimitives) {_context19.next = 15;break;}_i2 = 0, _Object$keys =
          Object.keys(removed.parentPrimitives);case 8:if (!(_i2 < _Object$keys.length)) {_context19.next = 15;break;}parentId = _Object$keys[_i2];_context19.next = 12;return (
            removeParentReference(removed, parentId));case 12:_i2++;_context19.next = 8;break;case 15:if (!


          removed.primitives) {_context19.next = 34;break;}
          childPrimitiveIds = new Proxy(removed.primitives, parser).uniqueAllIds;_iterator = _createForOfIteratorHelper(
          childPrimitiveIds);_context19.prev = 18;_iterator.s();case 20:if ((_step = _iterator.n()).done) {_context19.next = 26;break;}childId = _step.value;_context19.next = 24;return (
            _Primitive["default"].findOneAndUpdate(
            {
              "_id": new ObjectId(childId)
            },
            {
              $unset: _defineProperty({}, "parentPrimitives.".concat(removed.id), "")
            }));case 24:_context19.next = 20;break;case 26:_context19.next = 31;break;case 28:_context19.prev = 28;_context19.t0 = _context19["catch"](18);_iterator.e(_context19.t0);case 31:_context19.prev = 31;_iterator.f();return _context19.finish(31);case 34:_context19.next = 39;break;case 36:_context19.prev = 36;_context19.t1 = _context19["catch"](5);throw _context19.t1;case 39:





          res.json({ success: true });_context19.next = 45;break;case 42:_context19.prev = 42;_context19.t2 = _context19["catch"](1);

          res.status(400).json({ error: _context19.t2.message });case 45:case "end":return _context19.stop();}}, _callee19, null, [[1, 42], [5, 36], [18, 28, 31, 34]]);}));return function (_x54, _x55, _x56) {return _ref19.apply(this, arguments);};}());


router.post('/add_primitive', /*#__PURE__*/function () {var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(req, res, next) {var data, newPrimitive, newId;return _regeneratorRuntime().wrap(function _callee20$(_context20) {while (1) switch (_context20.prev = _context20.next) {case 0:
          data = req.body;_context20.prev = 1;_context20.next = 4;return (


            (0, _SharedFunctions.createPrimitive)(data));case 4:newPrimitive = _context20.sent;if (!(
          newPrimitive === undefined)) {_context20.next = 7;break;}throw (
            new Error("No primitive created"));case 7:

          newId = newPrimitive._id.toString();
          res.json({ success: true, id: newId, plainId: newPrimitive.plainId });_context20.next = 14;break;case 11:_context20.prev = 11;_context20.t0 = _context20["catch"](1);

          res.status(400).json({ error: _context20.t0.message });case 14:case "end":return _context20.stop();}}, _callee20, null, [[1, 11]]);}));return function (_x57, _x58, _x59) {return _ref20.apply(this, arguments);};}());





router.post('/set_relationship', /*#__PURE__*/function () {var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(req, res, next) {var data, doRemove, path, parentPath, check;return _regeneratorRuntime().wrap(function _callee22$(_context22) {while (1) switch (_context22.prev = _context22.next) {case 0:
          data = req.body;
          console.log(data);

          doRemove = /*#__PURE__*/function () {var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(path) {return _regeneratorRuntime().wrap(function _callee21$(_context21) {while (1) switch (_context21.prev = _context21.next) {case 0:_context21.next = 2;return (
                      _Primitive["default"].findOneAndUpdate(_defineProperty({

                        "_id": new ObjectId(data.receiver) },
                      path, { $in: [data.target] }),

                      { $pull: _defineProperty({}, path, data.target) },
                      { "new": true }));case 2:case "end":return _context21.stop();}}, _callee21);}));return function doRemove(_x63) {return _ref22.apply(this, arguments);};}();_context22.prev = 3;



          path = (0, _SharedFunctions.flattenPath)(data.path);
          parentPath = "parentPrimitives.".concat(data.receiver);if (!

          data.set) {_context22.next = 25;break;}_context22.prev = 7;_context22.next = 10;return (

            _Primitive["default"].findOneAndUpdate(_defineProperty({

              "_id": new ObjectId(data.target) },
            parentPath, { $nin: [path] }),

            { $push: _defineProperty({}, parentPath, path) }));case 10:_context22.next = 15;break;case 12:_context22.prev = 12;_context22.t0 = _context22["catch"](7);throw (


            new Error("Couldn't find target"));case 15:_context22.next = 17;return (

            _Primitive["default"].findOneAndUpdate(_defineProperty({

              "_id": new ObjectId(data.receiver) },
            path, { $nin: [data.target] }),

            { $push: _defineProperty({}, path, data.target) }));case 17:_context22.next = 19;return (

            _Primitive["default"].find({ "_id": new ObjectId(data.target) }));case 19:check = _context22.sent;if (!(
          check.length === 0)) {_context22.next = 23;break;}
          doRemove(path);throw (
            new Error("Couldn't find target"));case 23:_context22.next = 34;break;case 25:_context22.prev = 25;_context22.next = 28;return (





            _Primitive["default"].findOneAndUpdate(_defineProperty({

              "_id": new ObjectId(data.target) },
            parentPath, { $in: [path] }),

            { $pull: _defineProperty({}, parentPath, path) }));case 28:_context22.next = 33;break;case 30:_context22.prev = 30;_context22.t1 = _context22["catch"](25);throw (


            new Error("Couldn't find target"));case 33:

          doRemove(path);case 34:

          res.json({ success: true });_context22.next = 40;break;case 37:_context22.prev = 37;_context22.t2 = _context22["catch"](3);

          res.status(400).json({ error: _context22.t2.message });case 40:case "end":return _context22.stop();}}, _callee22, null, [[3, 37], [7, 12], [25, 30]]);}));return function (_x60, _x61, _x62) {return _ref21.apply(this, arguments);};}());




router.get('/primitive/:id/getDocument', /*#__PURE__*/function () {var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(req, res, next) {var data, primitiveId, remoteReadStream;return _regeneratorRuntime().wrap(function _callee23$(_context23) {while (1) switch (_context23.prev = _context23.next) {case 0:
          data = req.body;
          primitiveId = req.params.id;
          console.log(primitiveId);_context23.prev = 3;_context23.next = 6;return (

            (0, _google_helper.getDocument)(primitiveId, req));case 6:remoteReadStream = _context23.sent;

          res.set('Cache-Control', 'public, max-age=31557600');
          remoteReadStream.pipe(res);_context23.next = 14;break;case 11:_context23.prev = 11;_context23.t0 = _context23["catch"](3);

          res.status(501).json({ message: "Error" });case 14:case "end":return _context23.stop();}}, _callee23, null, [[3, 11]]);}));return function (_x64, _x65, _x66) {return _ref23.apply(this, arguments);};}());



router.get('/primitive/:id/getDocumentAsPlainText', /*#__PURE__*/function () {var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(req, res, next) {var data, primitiveId, result;return _regeneratorRuntime().wrap(function _callee24$(_context24) {while (1) switch (_context24.prev = _context24.next) {case 0:
          data = req.body;
          primitiveId = req.params.id;
          console.log(primitiveId);_context24.prev = 3;_context24.next = 6;return (

            (0, _google_helper.getDocumentAsPlainText)(primitiveId, req));case 6:result = _context24.sent;
          res.json({ success: true, result: result === null || result === void 0 ? void 0 : result.plain });_context24.next = 14;break;case 10:_context24.prev = 10;_context24.t0 = _context24["catch"](3);

          res.status(400).json({ error: _context24.t0.message });return _context24.abrupt("return");case 14:case "end":return _context24.stop();}}, _callee24, null, [[3, 10]]);}));return function (_x67, _x68, _x69) {return _ref24.apply(this, arguments);};}());



router.get('/primitive/:id/discover', /*#__PURE__*/function () {var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(req, res, next) {var data, primitiveId, success, prim, category, extract, text, result, out, fieldMap;return _regeneratorRuntime().wrap(function _callee25$(_context25) {while (1) switch (_context25.prev = _context25.next) {case 0:
          data = req.body;
          primitiveId = req.params.id;
          success = false;_context25.prev = 3;_context25.next = 6;return (


            _Primitive["default"].findOne({ _id: new ObjectId(primitiveId) }));case 6:prim = _context25.sent;
          console.log("Got origin ".concat(prim.id, " - category = ").concat(prim.referenceId));_context25.next = 10;return (
            _Category["default"].findOne({ id: prim.referenceId }));case 10:category = _context25.sent;_context25.next = 13;return (
            (0, _google_helper.getDocumentAsPlainText)(primitiveId, req));case 13:extract = _context25.sent;if (!
          extract) {_context25.next = 25;break;}
          text = extract.plain;_context25.next = 18;return (

            (0, _openai_helper["default"])({
              opener: category.openai.opener,
              descriptor: category.openai.descriptor,
              responseInstructions: category.openai.responseInstructions,
              text: text,
              prompts: category.openai.prompts
            }));case 18:result = _context25.sent;

          if (result) {
            success = true;
            if (result.success) {
              out = {};
              fieldMap = category.openai.prompts.filter(function (p) {return p.type !== "instruction";}).map(function (p) {return p.field;});
              Object.values(result.response).forEach(function (item, idx) {
                var obj = Array.isArray(item) ? item[0] : item;
                if (obj.answer) {
                  if (obj.answer.toLowerCase().indexOf('not specified') === -1) {
                    if (fieldMap[idx]) {
                      out[fieldMap[idx]] = obj;
                    }
                  }
                }
              });
              result.response = out;
              prim.set("openai_error", null);
            } else {
              prim.set("openai_error", result.status);
            }
          } else {
            prim.set("openai_error", "UNKNOWN");
          }_context25.next = 22;return (
            prim.save());case 22:
          res.json({ success: success, result: result });_context25.next = 26;break;case 25:

          res.json({ success: false, result: "Document not extracted" });case 26:_context25.next = 33;break;case 28:_context25.prev = 28;_context25.t0 = _context25["catch"](3);




          console.log(_context25.t0);
          res.status(400).json({ error: _context25.t0.message });return _context25.abrupt("return");case 33:case "end":return _context25.stop();}}, _callee25, null, [[3, 28]]);}));return function (_x70, _x71, _x72) {return _ref25.apply(this, arguments);};}());




router.get('/primitive/:id/analyzeQuestions', /*#__PURE__*/function () {var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(req, res, next) {var data, primitiveId, qIds, out, success, result, origin, prim, _Primitive$find, questions, groups, _iterator2, _step2, _Primitive$find2, question, cPrompts, _iterator3, _step3, prompt, category, _out, isEmpty, _prompt$referencePara, _category$parameters, _category$parameters$, locateQuote, extract, text, _loop, _i3, _Object$values;return _regeneratorRuntime().wrap(function _callee26$(_context27) {while (1) switch (_context27.prev = _context27.next) {case 0:
          data = req.body;
          primitiveId = req.params.id;
          qIds = req.query.questionIds;
          out = [];_context27.prev = 4;


          success = false;_context27.next = 8;return (

            _Primitive["default"].findOne(_defineProperty({}, "primitives.origin", { $in: [primitiveId] })));case 8:origin = _context27.sent;_context27.next = 11;return (
            _Primitive["default"].findOne({ _id: new ObjectId(primitiveId) }));case 11:prim = _context27.sent;if (!(
          origin && prim)) {_context27.next = 70;break;}_context27.next = 15;return (

            _Primitive["default"].find((_Primitive$find = {}, _defineProperty(_Primitive$find, "parentPrimitives.".concat(origin._id, ".0"), 'primitives.origin'), _defineProperty(_Primitive$find, "type", 'question'), _Primitive$find)));case 15:questions = _context27.sent;

          groups = {};_iterator2 = _createForOfIteratorHelper(

          questions);_context27.prev = 18;_iterator2.s();case 20:if ((_step2 = _iterator2.n()).done) {_context27.next = 50;break;}question = _step2.value;if (!(
          qIds && !qIds.includes(question.id))) {_context27.next = 25;break;}
          console.log('skipping');return _context27.abrupt("continue", 48);case 25:_context27.next = 27;return (


            _Primitive["default"].find((_Primitive$find2 = {}, _defineProperty(_Primitive$find2, "parentPrimitives.".concat(question._id, ".0"), 'primitives.origin'), _defineProperty(_Primitive$find2, "type", 'prompt'), _Primitive$find2)));case 27:cPrompts = _context27.sent;_iterator3 = _createForOfIteratorHelper(
          cPrompts);_context27.prev = 29;_iterator3.s();case 31:if ((_step3 = _iterator3.n()).done) {_context27.next = 40;break;}prompt = _step3.value;_context27.next = 35;return (
            _Category["default"].findOne({ id: prompt.referenceId }));case 35:category = _context27.sent;
          groups[prompt.referenceId] = groups[prompt.referenceId] || {
            category: category,
            id: prompt.referenceId,
            prompts: []
          };
          if (category) {
            _out = void 0;
            isEmpty = prompt.allowInput === false || prompt.title === undefined || prompt.title === null || prompt.title.trim() === "";
            if (isEmpty) {
              _out = category.empty;
            } else {
              _out = category.base.replace("${t}", prompt.title);
            }
            if (_out) {
              _out = _out.replace("${n}", ((_prompt$referencePara = prompt.referenceParameters) === null || _prompt$referencePara === void 0 ? void 0 : _prompt$referencePara.count) || ((_category$parameters = category.parameters) === null || _category$parameters === void 0 ? void 0 : (_category$parameters$ = _category$parameters.count) === null || _category$parameters$ === void 0 ? void 0 : _category$parameters$["default"]));
              groups[prompt.referenceId].prompts.push({
                id: prompt.id,
                text: _out
              });
            }
          }case 38:_context27.next = 31;break;case 40:_context27.next = 45;break;case 42:_context27.prev = 42;_context27.t0 = _context27["catch"](29);_iterator3.e(_context27.t0);case 45:_context27.prev = 45;_iterator3.f();return _context27.finish(45);case 48:_context27.next = 20;break;case 50:_context27.next = 55;break;case 52:_context27.prev = 52;_context27.t1 = _context27["catch"](18);_iterator2.e(_context27.t1);case 55:_context27.prev = 55;_iterator2.f();return _context27.finish(55);case 58:



          locateQuote = function locateQuote(oQuote, document) {
            var quote = oQuote.toLowerCase().replaceAll(/\./g, " ").replaceAll(/\s+/g, " ");
            console.log("looking for ".concat(quote));
            var startPage = 0;
            var endPage = 0;
            var startIdx = 0;
            var endIdx = 0;
            var terminate = false;
            var subset = function subset(fwd) {
              var _final = function _final(data) {
                return data.join(" ").toLowerCase().replaceAll(/\./g, " ").replaceAll(/\s+/g, " ");
              };
              var str = [];
              if (startIdx >= document.pages[endPage].content.length) {
                startIdx = 0;
                startPage++;

              }

              if (startPage === endPage && startIdx > endIdx) {
                return _final(str);
              }

              if (fwd && endIdx >= document.pages[endPage].content.length) {
                var oldIdx = endIdx;
                endIdx = 0;
                endPage++;
                if (endPage === document.pages.length) {
                  terminate = true;
                  endPage--;
                  endIdx = oldIdx - 1;
                  return _final(str);
                }
              }
              for (var p = startPage; p <= endPage; p++) {
                var start = p === startPage ? startIdx : 0;
                var max = document.pages[p].content.length;
                for (var i = start; i < max; i++) {
                  if (p === endPage && i > endIdx) {
                    continue;
                  }
                  if (!document.pages[p].content[i].ignore) {
                    str.push(document.pages[p].content[i].str);
                  }
                }
              }
              return _final(str);
            };
            // first pass
            while (subset(true).indexOf(quote) === -1 && !terminate) {
              endIdx++;
            }
            console.log("found end page ".concat(endPage, " / ").concat(endIdx));

            var out = undefined;
            if (!terminate) {

              terminate = false;

              while (subset(false).indexOf(quote) !== -1 && !terminate) {
                startIdx++;
              }
              if (!terminate) {
                if (startIdx === 0) {
                  startPage--;
                  startIdx = document.pages[startPage].content.length - 1;

                } else {
                  startIdx--;
                }
                console.log("found start at page ".concat(startPage, " / ").concat(startIdx, " - ").concat(endPage, " / ").concat(endIdx));
                out = [];
                for (var p = startPage; p <= endPage; p++) {
                  var start = p === startPage ? startIdx : 0;
                  var max = document.pages[p].content.length;
                  for (var i = start; i < max; i++) {
                    if (p === endPage && i > endIdx) {
                      continue;
                    }
                    var item = document.pages[p].content[i];
                    if (item) {

                      var w = document.pages[p].pageInfo.width / 100;
                      var h = document.pages[p].pageInfo.height / 100;
                      out.push({
                        pageIndex: p,
                        left: item.x / w,
                        top: (item.y - item.height) / h,
                        width: item.width / w,
                        height: item.height / h
                      });
                    }
                  }
                }
              }
            }
            return out;

          };_context27.next = 61;return (

            (0, _google_helper.getDocumentAsPlainText)(primitiveId, req));case 61:extract = _context27.sent;
          /* const out = locateQuote("we as a firm assume the data is wrong coming up with a strategy that helps us to understand the difference in error for example, in commercial real estate, there are a fixed number of vendors who investors rely on for doing their underwriting they all have different approaches to generating a data set e.g. avg rent, price per square foot some do it by surveying owners or tenants some use reits as a way to back out data others leverage partnerships with operators e.g. the greystars", extract.data)
           res.json({success: success, result: out})
           return */

          text = extract.plain;_loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {var group, resultField;return _regeneratorRuntime().wrap(function _loop$(_context26) {while (1) switch (_context26.prev = _context26.next) {case 0:
                  group = _Object$values[_i3];
                  resultField = group.category.openai.field || "problem";_context26.next = 4;return (
                    (0, _openai_helper["default"])({
                      opener: group.category.openai.opener,
                      descriptor: group.category.openai.descriptor,
                      responseInstructions: group.category.openai.responseInstructions,
                      text: text,
                      prompts: group.prompts.map(function (p) {return p.text;})
                    }));case 4:result = _context26.sent;

                  /* result = {
                     //  response: JSON.parse('{\n  "T0": {\n    "results": [\n      {\n        "quote": "Trying to implement consistency and drive data quality",\n        "need": "Consistency and data quality"\n      },\n      {\n        "quote": "The data quality issue is the most impactful",\n        "need": "Data quality"\n      },\n      {\n        "quote": "Having one single view of what our standardized data sets are",\n        "need": "Standardization of data sets"\n      },\n      {\n        "quote": "Trying to apply that model to data sets in your organization",\n        "need": "Data set organization"\n      },\n      {\n        "quote": "Being able to reconcile to a single individual",\n        "need": "Entity resolution"\n      }\n    ]\n  }\n}'),
                       response: {
                           "T0": [
                               {
                                   "quote": "Everyone has a slightly different view of headcount for the organization",
                                   "problem": "It sucks that there is no centralized version of truth for organization-wide data like headcount.",
                                   "scale": 7
                               },
                               {
                                   "quote": "Because the way our data is stored is siloed, any changes I make won’t carry through to other members of the department",
                                   "problem": "It sucks that changes made to data in one department won't reflect across the entire organization due to silos.",
                                   "scale": 8
                               },
                               {
                                   "quote": "The surprise would be that none of these data sets are really joined up. You kind of assume that there is a lot more connection between data sets and data sources than there actually are.",
                                   "problem": "It sucks that there is a lack of data provenance across the organization, with data sets not being joined up.",
                                   "scale": 6
                               }
                           ],
                           "T1": [
                               {
                                   "quote": "Trying to implement consistency and drive data quality.",
                                   "problem": "It sucks that there are inconsistencies and poor data quality across the organization.",
                                   "scale": 6
                               }
                           ],
                           "T2": [
                               {
                                   "quote": "None"
                               }
                           ]
                       },
                       success:true}*/


                  if (result) {
                    success = true;
                    if (result.success) {
                      if (group.prompts.length == 1 && Array.isArray(result.response)) {
                        result.response = {
                          "T1": Object.values(result.response)
                        };
                      }
                      result = {
                        result: Object.values(result.response).map(function (d, idx) {
                          var results = Array.isArray(d) ? d : Object.values(d);
                          console.log(results.length);
                          if (results.length === 1) {
                            console.log(results[0] instanceof Object, Object.keys(results[0]).length === 1, Array.isArray(Object.values(results[0])));
                            if (results.length === 1 && Array.isArray(results[0])) {
                              console.log("Aligning to nested array");
                              console.log(results);
                              results = Object.values(results[0]);
                            }
                          }
                          if (!results.forEach) {
                            console.log(results);
                            throw new Error("UNEXPECT DATA TYPE FOR RESU");
                          }
                          results.forEach(function (p) {
                            if (p.quote) {
                              if (p[resultField] == undefined || p[resultField] === "none" || p.quote === 'none') {
                                return;
                              }
                              p.highlightAreas = locateQuote(p.quote, extract.data);
                            }
                          });
                          return group.prompts[idx] ?
                          {
                            id: group.prompts[idx].id,
                            results: results
                          } :
                          { id: "error" };
                        }),
                        instructions: result.instructions,
                        raw: result.raw,
                        categoryId: group.id
                      };
                    } else {
                      result = { raw: result.raw, instructions: result.instructions, categoryId: group.id, parseFail: true };
                    }
                    out.push(result);
                  }case 6:case "end":return _context26.stop();}}, _loop);});_i3 = 0, _Object$values = Object.values(groups);case 65:if (!(_i3 < _Object$values.length)) {_context27.next = 70;break;}return _context27.delegateYield(_loop(), "t2", 67);case 67:_i3++;_context27.next = 65;break;case 70:


          res.json({ success: success, result: out });_context27.next = 78;break;case 73:_context27.prev = 73;_context27.t3 = _context27["catch"](4);

          console.log(_context27.t3);
          res.status(400).json({ error: _context27.t3.message });return _context27.abrupt("return");case 78:case "end":return _context27.stop();}}, _callee26, null, [[4, 73], [18, 52, 55, 58], [29, 42, 45, 48]]);}));return function (_x73, _x74, _x75) {return _ref26.apply(this, arguments);};}());function






replicateURLtoStorage(_x76, _x77, _x78) {return _replicateURLtoStorage.apply(this, arguments);}function _replicateURLtoStorage() {_replicateURLtoStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(url, id, bucketName) {var storage, bucket, file, stream, response;return _regeneratorRuntime().wrap(function _callee27$(_context28) {while (1) switch (_context28.prev = _context28.next) {case 0:
          console.log("replicating");if (!(
          !url || !id)) {_context28.next = 3;break;}return _context28.abrupt("return", false);case 3:if (!(
          url.slice(0, 4) !== "http")) {_context28.next = 5;break;}return _context28.abrupt("return", false);case 5:
          storage = new _storage.Storage({
            projectId: process.env.GOOGLE_PROJECT_ID
          });

          bucketname = 'bucket-profiles-vf-cc';

          bucket = storage.bucket(bucketname);
          file = bucket.file(id);_context28.next = 11;return (
            file.exists());case 11:if (!_context28.sent[0]) {_context28.next = 14;break;}_context28.next = 14;return (
            file["delete"]());case 14:

          stream = file.createWriteStream();_context28.next = 17;return (


            fetch(url));case 17:response = _context28.sent;_context28.next = 20;return (
            (0, _promises.finished)(_stream.Readable.fromWeb(response.body).pipe(stream)));case 20:return _context28.abrupt("return",
          true);case 21:case "end":return _context28.stop();}}, _callee27);}));return _replicateURLtoStorage.apply(this, arguments);}var _default =




router;exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,