"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = PrimitiveParser;function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function PrimitiveParser(obj) {
  var uniqueArray = function uniqueArray(a) {
    return a.filter(function (v, i) {return a.indexOf(v) === i;});
  };
  var structure = {
    get: function get(target, prop, receiver) {
      if (prop === "add") {
        return function () {
          var item = arguments[0];
          if (arguments[1]) {
            var path = receiver.fromPath(arguments[1], true);

            if (!path) {
              console.warn("Path not found");
              console.log(path);
              return undefined;
            }
            return path.add(item);
          }
          if (!(target instanceof Array)) {
            if (!(null in target)) {
              target[null] = [];
            }
            target = target["null"];
          }
          target.push(item);
          return receiver;
        };
      }
      if (prop === "remove") {
        return function () {
          var item = arguments[0];
          if (arguments[1]) {
            var path = receiver.fromPath(arguments[1]);

            if (!path) {
              console.warn("Path not found");
              console.log(path);
              return undefined;
            }
            return path.remove(item);
          }
          if (!(target instanceof Array)) {
            target = target["null"];
          }
          var idx = target.findIndex(function (i) {return i === item;});
          while (idx > -1) {
            target.splice(idx, 1);
            idx = target.findIndex(function (i) {return i === item;});
          }

          return receiver;
        };
      }
      if (prop === "move") {
        return function () {
          var item = arguments[0];
          var from = receiver.fromPath(arguments[1]);
          var to = receiver.fromPath(arguments[2], true);
          if (from && to) {
            from.remove(item);
          }
          if (to) {
            to.add(item);
          }
          return to;
        };
      }

      if (prop === "includes") {
        return function () {
          var value = arguments[0];
          var find = function find(v) {
            return Object.values(v).reduce(function (r, d) {
              if (d instanceof Object) {
                return r || find(d);
              } else {
                return r || d === value;
              }
            }, false);
          };
          return find(target);
        };
      }
      if (prop === "paths") {
        return function () {
          var id = arguments[0];
          var find = function find(v, path) {
            var out = [];
            if (v instanceof Array) {
              if (v.includes(id)) {
                out.push(path);
              }
              v.filter(function (d) {return d instanceof Object;}).forEach(function (d) {
                out.push(Object.keys(d).map(function (k) {
                  return find(d[k], path + "." + k);
                }));
              });
            } else {
              out.push(Object.keys(v).map(function (k) {
                return find(v[k], path + "." + k);
              }));
            }
            out = out.flat(2).filter(function (d) {return d !== undefined;});
            return out.length > 0 ? out : undefined;
          };
          var result = find(target, "");
          if (arguments.length == 2) {
            var str = arguments[1] instanceof Array ? ".".concat(arguments[1].join('.'), ".") : arguments[1];
            var len = str.length;
            result = result.filter(function (p) {return p.slice(0, len) === str;});
          }
          if (result) {
            result = result.map(function (p) {return p.replace(/^\.null/, "");});
          }
          return result;
        };
      }
      if (prop === "relationships") {
        return function () {
          var path = receiver.paths.apply(receiver, arguments);
          return path === null || path === void 0 ? void 0 : path.map(function (p) {return p.split('.').slice(-1)[0];});
        };
      }

      if (prop === "all") {
        return target;
      }
      if (prop === "ids" && target instanceof Array) {
        return target.map(function (d) {
          if (d instanceof Object) {
            return undefined;
          } else {
            return d;
          }}).filter(function (d) {return d;});
      }
      if (prop === "uniqueIds" && target instanceof Array) {
        return uniqueArray(receiver.ids);
      }

      if (prop === "allIds") {
        var flatten = function flatten(v) {
          return Object.values(v).map(function (d) {
            if (d instanceof Object) {
              return flatten(d);
            } else {
              return d;
            }
          }).flat();
        };
        return flatten(target);
      }
      if (prop === "uniqueAllIds") {
        return uniqueArray(receiver.allIds);
      }
      if (prop === "filter" || prop === "length" || prop === "map") {
        var base = receiver.allItems;
        var value = base[prop];
        if (value instanceof Function) {
          return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
            return value.apply(base, args);
          };
        }
      }
      if (Array.isArray(target)) {
        var out;
        target.forEach(function (d) {
          if (d instanceof Object) {
            if (prop in d) {
              out = d[prop];
            }
          }
        });
        if (out) {
          return new Proxy(out, structure);
        }
        if (prop in target) {
          var _value = target[prop];
          if (_value instanceof Function) {
            return function () {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}
              return _value.apply(this === receiver ? target : this, args);
            };
          }
          return _value;
        }
      }
      if (prop in target) {
        return new Proxy(target[prop], structure);
      } else {
        var s = prop.toString();
        if (s in target) {
          return new Proxy(target[s], structure);
        }
      }
      if (prop === "fromPath") {
        return function (path) {var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var node = receiver;
          if (typeof path === "string") {
            path = path.split('.');
            var last = path.pop();
            if (path.length === 0) {
              path = last;
            } else {

              path = path.reverse().reduce(function (o, c, idx) {
                return _defineProperty({}, c, idx === 0 ? last : o);
              }, {});
            }
          }

          while (path instanceof Object) {
            var step = Object.keys(path)[0];
            var _last = node;
            path = path[step];
            node = node[step];
            if (node === undefined) {
              if (create) {
                _last[step] = {};
                node = _last[step];
              } else {
                return undefined;
              }
            }
          }
          if (!node[path] && create) {
            node[path] = new Proxy([], structure);
          }
          return node[path];

        };
      }
      if (obj) {
        // was here
        if (prop === "items") {
          return receiver.ids.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "allItems") {
          return receiver.allIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "uniqueAllItems") {
          return receiver.uniqueAllIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "uniqueItems") {
          return receiver.uniqueIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (obj.types.includes(prop)) {
          return receiver.items.filter(function (p) {return p.type === prop;});
        }
        if (prop.slice(0, 6) === 'unique') {
          var type = prop.slice(6).toLowerCase();
          if (obj.types.includes(type)) {
            return receiver.uniqueItems.filter(function (p) {return p.type === type;});
          }
        }
        if (prop.slice(0, 9) === 'allUnique') {
          var _type = prop.slice(9).toLowerCase();
          if (obj.types.includes(_type)) {
            return receiver.uniqueAllItems.filter(function (p) {return p.type === _type;});
          }
        }
        if (prop.slice(0, 3) === 'all') {
          var _type2 = prop.slice(3).toLowerCase();
          if (obj.types.includes(_type2)) {
            return receiver.allItems.filter(function (p) {return p.type === _type2;});
          }
        }
      }
      if (target[null]) {
        return new Proxy(target[null], structure)[prop];
      }
    }
  };
  return structure;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmltaXRpdmVQYXJzZXIiLCJvYmoiLCJ1bmlxdWVBcnJheSIsImEiLCJmaWx0ZXIiLCJ2IiwiaSIsImluZGV4T2YiLCJzdHJ1Y3R1cmUiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJpdGVtIiwiYXJndW1lbnRzIiwicGF0aCIsImZyb21QYXRoIiwiY29uc29sZSIsIndhcm4iLCJsb2ciLCJ1bmRlZmluZWQiLCJhZGQiLCJBcnJheSIsInB1c2giLCJyZW1vdmUiLCJpZHgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJmcm9tIiwidG8iLCJ2YWx1ZSIsImZpbmQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJyIiwiZCIsImlkIiwib3V0IiwiaW5jbHVkZXMiLCJmb3JFYWNoIiwia2V5cyIsIm1hcCIsImsiLCJmbGF0IiwibGVuZ3RoIiwicmVzdWx0Iiwic3RyIiwiY29uY2F0Iiwiam9pbiIsImxlbiIsInAiLCJzbGljZSIsInJlcGxhY2UiLCJwYXRocyIsImFwcGx5Iiwic3BsaXQiLCJpZHMiLCJmbGF0dGVuIiwiYWxsSWRzIiwiYmFzZSIsImFsbEl0ZW1zIiwiRnVuY3Rpb24iLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJpc0FycmF5IiwiUHJveHkiLCJfbGVuMiIsIl9rZXkyIiwicyIsInRvU3RyaW5nIiwiY3JlYXRlIiwibm9kZSIsImxhc3QiLCJwb3AiLCJyZXZlcnNlIiwibyIsImMiLCJfZGVmaW5lUHJvcGVydHkiLCJzdGVwIiwicHJpbWl0aXZlIiwidW5pcXVlQWxsSWRzIiwidW5pcXVlSWRzIiwidHlwZXMiLCJpdGVtcyIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsInVuaXF1ZUl0ZW1zIiwidW5pcXVlQWxsSXRlbXMiXSwic291cmNlcyI6WyIuLi9zZXJ2ZXIvUHJpbWl0aXZlc1BhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcmltaXRpdmVQYXJzZXIob2JqKXtcbiAgICBjb25zdCB1bmlxdWVBcnJheSA9IChhKT0+e1xuICAgICAgICByZXR1cm4gYS5maWx0ZXIoKHYsaSk9PmEuaW5kZXhPZih2KSA9PT0gaSlcbiAgICB9XG4gICAgY29uc3Qgc3RydWN0dXJlID0ge1xuICAgICAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJhZGRcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYXJndW1lbnRzWzFdICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY2VpdmVyLmZyb21QYXRoKGFyZ3VtZW50c1sxXSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIXBhdGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFBhdGggbm90IGZvdW5kYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGF0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aC5hZGQoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKHRhcmdldCBpbnN0YW5jZW9mIEFycmF5KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKG51bGwgaW4gdGFyZ2V0KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbnVsbF0gPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQubnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goIGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcInJlbW92ZVwiICl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhcmd1bWVudHNbMV0gKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcmVjZWl2ZXIuZnJvbVBhdGgoYXJndW1lbnRzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhcGF0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgUGF0aCBub3QgZm91bmRgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoLnJlbW92ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEodGFyZ2V0IGluc3RhbmNlb2YgQXJyYXkpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lm51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZHggPSB0YXJnZXQuZmluZEluZGV4KChpKT0+IGkgPT09IGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaWR4ID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zcGxpY2UoaWR4LDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gdGFyZ2V0LmZpbmRJbmRleCgoaSk9PiBpID09PSBpdGVtIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcIm1vdmVcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9ICByZWNlaXZlci5mcm9tUGF0aChhcmd1bWVudHNbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG8gPSAgcmVjZWl2ZXIuZnJvbVBhdGgoYXJndW1lbnRzWzJdLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGZyb20gJiYgdG8gKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tLnJlbW92ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRvICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8uYWRkKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcImluY2x1ZGVzXCIgKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmQgPSAodik9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2KS5yZWR1Y2UoKHIsIGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkIGluc3RhbmNlb2YoT2JqZWN0KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgfHwgZmluZChkKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciB8fCAoZCA9PT0gdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmQoIHRhcmdldCApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwicGF0aHNcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluZCA9ICh2LCBwYXRoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvdXQgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2IGluc3RhbmNlb2YoQXJyYXkpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2LmluY2x1ZGVzKCBpZCApKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKCBwYXRoIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LmZpbHRlcigoZCk9PmQgaW5zdGFuY2VvZihPYmplY3QpICkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKCBPYmplY3Qua2V5cyhkKS5tYXAoKGspPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmQoIGRba10sIHBhdGggKyBcIi5cIiArIGspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goIE9iamVjdC5rZXlzKHYpLm1hcCgoayk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kKCB2W2tdLCBwYXRoICsgXCIuXCIgKyBrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gb3V0LmZsYXQoMikuZmlsdGVyKChkKT0+ZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXQubGVuZ3RoID4gMCA/IG91dCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZpbmQoIHRhcmdldCwgXCJcIiApXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gYXJndW1lbnRzWzFdIGluc3RhbmNlb2YoQXJyYXkpID8gYC4ke2FyZ3VtZW50c1sxXS5qb2luKCcuJyl9LmAgOiBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuID0gc3RyLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKHApPT5wLnNsaWNlKDAsIGxlbikgPT09IHN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCByZXN1bHQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubWFwKChwKT0+cC5yZXBsYWNlKC9eXFwubnVsbC8sXCJcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwicmVsYXRpb25zaGlwc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IHJlY2VpdmVyLnBhdGhzKC4uLmFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoPy5tYXAoKHApPT5wLnNwbGl0KCcuJykuc2xpY2UoLTEpWzBdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcImFsbFwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJpZHNcIiAmJiB0YXJnZXQgaW5zdGFuY2VvZihBcnJheSkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm1hcCgoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkIGluc3RhbmNlb2YoT2JqZWN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRcbiAgICAgICAgICAgICAgICAgICAgICAgIH19KS5maWx0ZXIoKGQpPT5kKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVJZHNcIiAmJiB0YXJnZXQgaW5zdGFuY2VvZihBcnJheSkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pcXVlQXJyYXkoIHJlY2VpdmVyLmlkcyApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiYWxsSWRzXCIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGF0dGVuID0gKHYpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2KS5tYXAoKGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGQgaW5zdGFuY2VvZihPYmplY3QpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGF0dGVuKGQpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZsYXQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGF0dGVuKCB0YXJnZXQgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVBbGxJZHNcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlxdWVBcnJheSggcmVjZWl2ZXIuYWxsSWRzIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiZmlsdGVyXCIgfHwgcHJvcCA9PT0gXCJsZW5ndGhcIiB8fCBwcm9wID09PSBcIm1hcFwiKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHJlY2VpdmVyLmFsbEl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYmFzZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseShiYXNlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIEFycmF5LmlzQXJyYXkodGFyZ2V0KSApe1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGQgaW5zdGFuY2VvZihPYmplY3QpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCA9IGRbcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmKCBvdXQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkob3V0LCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gdGFyZ2V0ICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodGhpcyA9PT0gcmVjZWl2ZXIgPyB0YXJnZXQgOiB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gdGFyZ2V0ICl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0W3Byb3BdLCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IHByb3AudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICBpZiggcyBpbiB0YXJnZXQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0W3NdLCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiZnJvbVBhdGhcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoLCBjcmVhdGUgPSBmYWxzZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IHJlY2VpdmVyICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggdHlwZW9mKHBhdGgpID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5zcGxpdCgnLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHBhdGgucG9wKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcGF0aC5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnJldmVyc2UoKS5yZWR1Y2UoKG8sIGMsIGlkeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7W2NdOiBpZHggPT09IDAgPyBsYXN0IDogb31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSx7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCBwYXRoIGluc3RhbmNlb2YoT2JqZWN0KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGVwID0gT2JqZWN0LmtleXMocGF0aClbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aFtzdGVwXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlW3N0ZXBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG5vZGUgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjcmVhdGUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Rbc3RlcF0gPSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGxhc3Rbc3RlcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggIW5vZGVbcGF0aF0gJiYgY3JlYXRlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVtwYXRoXSA9IG5ldyBQcm94eShbXSwgc3RydWN0dXJlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVbcGF0aF1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBvYmogKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FzIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiaXRlbXNcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIuaWRzLm1hcCgoZCk9Pm9iai5wcmltaXRpdmUoZCkpLmZpbHRlcigoZCk9PmQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiYWxsSXRlbXNcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIuYWxsSWRzLm1hcCgoZCk9Pm9iai5wcmltaXRpdmUoZCkpLmZpbHRlcigoZCk9PmQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwidW5pcXVlQWxsSXRlbXNcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIudW5pcXVlQWxsSWRzLm1hcCgoZCk9Pm9iai5wcmltaXRpdmUoZCkpLmZpbHRlcigoZCk9PmQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwidW5pcXVlSXRlbXNcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIudW5pcXVlSWRzLm1hcCgoZCk9Pm9iai5wcmltaXRpdmUoZCkpLmZpbHRlcigoZCk9PmQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIG9iai50eXBlcy5pbmNsdWRlcyhwcm9wKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIuaXRlbXMuZmlsdGVyKChwKT0+cC50eXBlPT09cHJvcClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcC5zbGljZSgwLDYpID09PSAndW5pcXVlJyApe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBwcm9wLnNsaWNlKDYpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBvYmoudHlwZXMuaW5jbHVkZXModHlwZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci51bmlxdWVJdGVtcy5maWx0ZXIoKHApPT5wLnR5cGUgPT09IHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3Auc2xpY2UoMCw5KSA9PT0gJ2FsbFVuaXF1ZScgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gcHJvcC5zbGljZSg5KS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggb2JqLnR5cGVzLmluY2x1ZGVzKHR5cGUpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIudW5pcXVlQWxsSXRlbXMuZmlsdGVyKChwKT0+cC50eXBlID09PSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wLnNsaWNlKDAsMykgPT09ICdhbGwnICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHByb3Auc2xpY2UoMykudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG9iai50eXBlcy5pbmNsdWRlcyh0eXBlKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLmFsbEl0ZW1zLmZpbHRlcigocCk9PnAudHlwZSA9PT0gdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggdGFyZ2V0W251bGxdKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXRbbnVsbF0sIHN0cnVjdHVyZSlbcHJvcF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZVxuICAgIH0iXSwibWFwcGluZ3MiOiIyb0NBQWUsU0FBU0EsZUFBZUEsQ0FBQ0MsR0FBRyxFQUFDO0VBQ3hDLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFJQyxDQUFDLEVBQUc7SUFDckIsT0FBT0EsQ0FBQyxDQUFDQyxNQUFNLENBQUMsVUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLFVBQUdILENBQUMsQ0FBQ0ksT0FBTyxDQUFDRixDQUFDLENBQUMsS0FBS0MsQ0FBQyxHQUFDO0VBQzlDLENBQUM7RUFDRCxJQUFNRSxTQUFTLEdBQUc7SUFDVkMsR0FBRyxXQUFBQSxJQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO01BQ3hCLElBQUlELElBQUksS0FBSyxLQUFLLEVBQUU7UUFDaEIsT0FBTyxZQUFVO1VBQ2IsSUFBSUUsSUFBSSxHQUFHQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1VBQ3ZCLElBQUlBLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNkLElBQU1DLElBQUksR0FBR0gsUUFBUSxDQUFDSSxRQUFRLENBQUNGLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7O1lBRWxELElBQUksQ0FBQ0MsSUFBSSxFQUFDO2NBQ05FLE9BQU8sQ0FBQ0MsSUFBSSxrQkFBa0I7Y0FDOUJELE9BQU8sQ0FBQ0UsR0FBRyxDQUFDSixJQUFJLENBQUM7Y0FDakIsT0FBT0ssU0FB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