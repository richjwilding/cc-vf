"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = PrimitiveParser;function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function PrimitiveParser(obj) {
  var uniqueArray = function uniqueArray(a) {
    return a.filter(function (v, i) {return a.indexOf(v) === i;});
  };
  var structure = {
    get: function get(target, prop, receiver) {
      if (prop === "add") {
        return function () {
          var item = arguments[0];
          if (arguments[1]) {
            var path = receiver.fromPath(arguments[1], true);

            if (!path) {
              console.warn("Path not found");
              console.log(path);
              return undefined;
            }
            return path.add(item);
          }
          if (!(target instanceof Array)) {
            if (!(null in target)) {
              target[null] = [];
            }
            target = target["null"];
          }
          target.push(item);
          return receiver;
        };
      }
      if (prop === "remove") {
        return function () {
          var item = arguments[0];
          if (arguments[1]) {
            var path = receiver.fromPath(arguments[1]);

            if (!path) {
              console.warn("Path not found");
              console.log(path);
              return undefined;
            }
            return path.remove(item);
          }
          if (!(target instanceof Array)) {
            target = target["null"];
          }
          var idx = target.findIndex(function (i) {return i === item;});
          while (idx > -1) {
            target.splice(idx, 1);
            idx = target.findIndex(function (i) {return i === item;});
          }

          return receiver;
        };
      }
      if (prop === "move") {
        return function () {
          var item = arguments[0];
          var from = receiver.fromPath(arguments[1]);
          var to = receiver.fromPath(arguments[2], true);
          if (from && to) {
            from.remove(item);
          }
          if (to) {
            to.add(item);
          }
          return to;
        };
      }

      if (prop === "includes") {
        return function () {
          var value = arguments[0];
          var find = function find(v) {
            return Object.values(v).reduce(function (r, d) {
              if (d instanceof Object) {
                return r || find(d);
              } else {
                return r || d === value;
              }
            }, false);
          };
          return find(target);
        };
      }
      if (prop === "paths") {
        return function () {
          var id = arguments[0];
          var find = function find(v, path) {
            var out = [];
            if (v instanceof Array) {
              if (v.includes(id)) {
                out.push(path);
              }
              v.filter(function (d) {return d instanceof Object;}).forEach(function (d) {
                out.push(Object.keys(d).map(function (k) {
                  return find(d[k], path + "." + k);
                }));
              });
            } else {
              out.push(Object.keys(v).map(function (k) {
                return find(v[k], path + "." + k);
              }));
            }
            out = out.flat(2).filter(function (d) {return d !== undefined;});
            return out.length > 0 ? out : undefined;
          };
          var result = find(target, "");
          if (arguments.length == 2) {
            var str = arguments[1] instanceof Array ? ".".concat(arguments[1].join('.'), ".") : arguments[1];
            var len = str.length;
            result = result.filter(function (p) {return p.slice(0, len) === str;});
          }
          if (result) {
            result = result.map(function (p) {return p.replace(/^\.null/, "");});
          }
          return result;
        };
      }
      if (prop === "relationships") {
        return function () {
          var path = receiver.paths.apply(receiver, arguments);
          return path === null || path === void 0 ? void 0 : path.map(function (p) {return p.split('.').slice(-1)[0];});
        };
      }

      if (prop === "all") {
        return target;
      }
      if (prop === "ids" && target instanceof Array) {
        return target.map(function (d) {
          if (d instanceof Object) {
            return undefined;
          } else {
            return d;
          }}).filter(function (d) {return d;});
      }
      if (prop === "uniqueIds" && target instanceof Array) {
        return uniqueArray(receiver.ids);
      }

      if (prop === "allIds") {
        var flatten = function flatten(v) {
          return Object.values(v).map(function (d) {
            if (d instanceof Object) {
              return flatten(d);
            } else {
              return d;
            }
          }).flat();
        };
        return flatten(target);
      }
      if (prop === "uniqueAllIds") {
        return uniqueArray(receiver.allIds);
      }
      if (prop === "filter" || prop === "length" || prop === "map") {
        var base = receiver.allItems;
        var value = base[prop];
        if (value instanceof Function) {
          return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
            return value.apply(base, args);
          };
        }
      }
      if (Array.isArray(target)) {
        var out;
        target.forEach(function (d) {
          if (d instanceof Object) {
            if (prop in d) {
              out = d[prop];
            }
          }
        });
        if (out) {
          return new Proxy(out, structure);
        }
        if (prop in target) {
          var _value = target[prop];
          if (_value instanceof Function) {
            return function () {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}
              return _value.apply(this === receiver ? target : this, args);
            };
          }
          return _value;
        }
      }
      if (prop in target) {
        return new Proxy(target[prop], structure);
      } else {
        var s = prop.toString();
        if (s in target) {
          return new Proxy(target[s], structure);
        }
      }
      if (prop === "underlying") {
        return target;
      }
      if (prop === "fromPath") {
        return function (path) {var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var node = receiver;
          if (typeof path === "string") {
            path = path.split('.');
            var last = path.pop();
            if (path.length === 0) {
              path = last;
            } else {

              path = path.reverse().reduce(function (o, c, idx) {
                return _defineProperty({}, c, idx === 0 ? last : o);
              }, {});
            }
          }

          var addNode = function addNode(last, step, prevLast, prevStep) {
            var underlying = last.underlying;
            console.log("adding ".concat(step));
            if (Array.isArray(underlying)) {
              if (underlying.length === 0 && prevLast) {
                if (Array.isArray(prevLast)) {
                  var arr = prevLast.underlying.find(function (d) {return Object.keys(d)[0] == prevStep;});
                  if (arr) {
                    arr[prevStep] = {};
                  }
                } else {
                  prevLast.underlying[prevStep] = {};
                }
                last = prevLast[prevStep];
                underlying = last.underlying;
                underlying[step] = [];
              } else {
                underlying.push(_defineProperty({}, step, []));
              }
            } else {
              underlying[step] = [];
            }
            return last;
          };

          var prevLast;
          var prevStep;
          while (path instanceof Object) {
            var step = Object.keys(path)[0];
            var _last = node;
            path = path[step];
            node = node[step];
            if (node === undefined) {
              if (create) {
                _last = addNode(_last, step, prevLast, prevStep);
                node = _last[step];
              } else {
                return undefined;
              }
            }
            prevLast = _last;
            prevStep = step;
          }
          if (!node[path] && create) {
            node = addNode(node, path, prevLast, prevStep);
          }
          return node[path];

        };
      }
      if (obj) {
        // was here
        if (prop === "items") {
          return receiver.ids.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "allItems") {
          return receiver.allIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "uniqueAllItems") {
          return receiver.uniqueAllIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (prop === "uniqueItems") {
          return receiver.uniqueIds.map(function (d) {return obj.primitive(d);}).filter(function (d) {return d;});
        }
        if (obj.types.includes(prop)) {
          return receiver.items.filter(function (p) {return p.type === prop;});
        }
        if (prop.slice(0, 6) === 'unique') {
          var type = prop.slice(6).toLowerCase();
          if (obj.types.includes(type)) {
            return receiver.uniqueItems.filter(function (p) {return p.type === type;});
          }
        }
        if (prop.slice(0, 9) === 'allUnique') {
          var _type = prop.slice(9).toLowerCase();
          if (obj.types.includes(_type)) {
            return receiver.uniqueAllItems.filter(function (p) {return p.type === _type;});
          }
        }
        if (prop.slice(0, 3) === 'all') {
          var _type2 = prop.slice(3).toLowerCase();
          if (obj.types.includes(_type2)) {
            return receiver.allItems.filter(function (p) {return p.type === _type2;});
          }
        }
      }
      if (target[null]) {
        return new Proxy(target[null], structure)[prop];
      }
    }
  };
  return structure;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmltaXRpdmVQYXJzZXIiLCJvYmoiLCJ1bmlxdWVBcnJheSIsImEiLCJmaWx0ZXIiLCJ2IiwiaSIsImluZGV4T2YiLCJzdHJ1Y3R1cmUiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJpdGVtIiwiYXJndW1lbnRzIiwicGF0aCIsImZyb21QYXRoIiwiY29uc29sZSIsIndhcm4iLCJsb2ciLCJ1bmRlZmluZWQiLCJhZGQiLCJBcnJheSIsInB1c2giLCJyZW1vdmUiLCJpZHgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJmcm9tIiwidG8iLCJ2YWx1ZSIsImZpbmQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJyIiwiZCIsImlkIiwib3V0IiwiaW5jbHVkZXMiLCJmb3JFYWNoIiwia2V5cyIsIm1hcCIsImsiLCJmbGF0IiwibGVuZ3RoIiwicmVzdWx0Iiwic3RyIiwiY29uY2F0Iiwiam9pbiIsImxlbiIsInAiLCJzbGljZSIsInJlcGxhY2UiLCJwYXRocyIsImFwcGx5Iiwic3BsaXQiLCJpZHMiLCJmbGF0dGVuIiwiYWxsSWRzIiwiYmFzZSIsImFsbEl0ZW1zIiwiRnVuY3Rpb24iLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJpc0FycmF5IiwiUHJveHkiLCJfbGVuMiIsIl9rZXkyIiwicyIsInRvU3RyaW5nIiwiY3JlYXRlIiwibm9kZSIsImxhc3QiLCJwb3AiLCJyZXZlcnNlIiwibyIsImMiLCJfZGVmaW5lUHJvcGVydHkiLCJhZGROb2RlIiwic3RlcCIsInByZXZMYXN0IiwicHJldlN0ZXAiLCJ1bmRlcmx5aW5nIiwiYXJyIiwicHJpbWl0aXZlIiwidW5pcXVlQWxsSWRzIiwidW5pcXVlSWRzIiwidHlwZXMiLCJpdGVtcyIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsInVuaXF1ZUl0ZW1zIiwidW5pcXVlQWxsSXRlbXMiXSwic291cmNlcyI6WyIuLi9zZXJ2ZXIvUHJpbWl0aXZlc1BhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcmltaXRpdmVQYXJzZXIob2JqKXtcbiAgICBjb25zdCB1bmlxdWVBcnJheSA9IChhKT0+e1xuICAgICAgICByZXR1cm4gYS5maWx0ZXIoKHYsaSk9PmEuaW5kZXhPZih2KSA9PT0gaSlcbiAgICB9XG4gICAgY29uc3Qgc3RydWN0dXJlID0ge1xuICAgICAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJhZGRcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYXJndW1lbnRzWzFdICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY2VpdmVyLmZyb21QYXRoKGFyZ3VtZW50c1sxXSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIXBhdGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFBhdGggbm90IGZvdW5kYClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGF0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aC5hZGQoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKHRhcmdldCBpbnN0YW5jZW9mIEFycmF5KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKG51bGwgaW4gdGFyZ2V0KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbnVsbF0gPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQubnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goIGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcInJlbW92ZVwiICl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhcmd1bWVudHNbMV0gKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcmVjZWl2ZXIuZnJvbVBhdGgoYXJndW1lbnRzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhcGF0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgUGF0aCBub3QgZm91bmRgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoLnJlbW92ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEodGFyZ2V0IGluc3RhbmNlb2YgQXJyYXkpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lm51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZHggPSB0YXJnZXQuZmluZEluZGV4KChpKT0+IGkgPT09IGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaWR4ID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zcGxpY2UoaWR4LDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gdGFyZ2V0LmZpbmRJbmRleCgoaSk9PiBpID09PSBpdGVtIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcIm1vdmVcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9ICByZWNlaXZlci5mcm9tUGF0aChhcmd1bWVudHNbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG8gPSAgcmVjZWl2ZXIuZnJvbVBhdGgoYXJndW1lbnRzWzJdLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGZyb20gJiYgdG8gKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tLnJlbW92ZShpdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRvICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8uYWRkKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcImluY2x1ZGVzXCIgKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmQgPSAodik9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2KS5yZWR1Y2UoKHIsIGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkIGluc3RhbmNlb2YoT2JqZWN0KSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgfHwgZmluZChkKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciB8fCAoZCA9PT0gdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmQoIHRhcmdldCApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwicGF0aHNcIiApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluZCA9ICh2LCBwYXRoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvdXQgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2IGluc3RhbmNlb2YoQXJyYXkpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2LmluY2x1ZGVzKCBpZCApKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKCBwYXRoIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LmZpbHRlcigoZCk9PmQgaW5zdGFuY2VvZihPYmplY3QpICkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKCBPYmplY3Qua2V5cyhkKS5tYXAoKGspPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmQoIGRba10sIHBhdGggKyBcIi5cIiArIGspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goIE9iamVjdC5rZXlzKHYpLm1hcCgoayk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kKCB2W2tdLCBwYXRoICsgXCIuXCIgKyBrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gb3V0LmZsYXQoMikuZmlsdGVyKChkKT0+ZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXQubGVuZ3RoID4gMCA/IG91dCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZpbmQoIHRhcmdldCwgXCJcIiApXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gYXJndW1lbnRzWzFdIGluc3RhbmNlb2YoQXJyYXkpID8gYC4ke2FyZ3VtZW50c1sxXS5qb2luKCcuJyl9LmAgOiBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuID0gc3RyLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKHApPT5wLnNsaWNlKDAsIGxlbikgPT09IHN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCByZXN1bHQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubWFwKChwKT0+cC5yZXBsYWNlKC9eXFwubnVsbC8sXCJcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwicmVsYXRpb25zaGlwc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IHJlY2VpdmVyLnBhdGhzKC4uLmFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoPy5tYXAoKHApPT5wLnNwbGl0KCcuJykuc2xpY2UoLTEpWzBdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKCBwcm9wID09PSBcImFsbFwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJpZHNcIiAmJiB0YXJnZXQgaW5zdGFuY2VvZihBcnJheSkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm1hcCgoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkIGluc3RhbmNlb2YoT2JqZWN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRcbiAgICAgICAgICAgICAgICAgICAgICAgIH19KS5maWx0ZXIoKGQpPT5kKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVJZHNcIiAmJiB0YXJnZXQgaW5zdGFuY2VvZihBcnJheSkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pcXVlQXJyYXkoIHJlY2VpdmVyLmlkcyApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiYWxsSWRzXCIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGF0dGVuID0gKHYpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2KS5tYXAoKGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGQgaW5zdGFuY2VvZihPYmplY3QpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGF0dGVuKGQpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZsYXQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGF0dGVuKCB0YXJnZXQgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVBbGxJZHNcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlxdWVBcnJheSggcmVjZWl2ZXIuYWxsSWRzIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwiZmlsdGVyXCIgfHwgcHJvcCA9PT0gXCJsZW5ndGhcIiB8fCBwcm9wID09PSBcIm1hcFwiKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHJlY2VpdmVyLmFsbEl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYmFzZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseShiYXNlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIEFycmF5LmlzQXJyYXkodGFyZ2V0KSApe1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGQgaW5zdGFuY2VvZihPYmplY3QpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCA9IGRbcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmKCBvdXQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkob3V0LCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gdGFyZ2V0ICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodGhpcyA9PT0gcmVjZWl2ZXIgPyB0YXJnZXQgOiB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgaW4gdGFyZ2V0ICl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0W3Byb3BdLCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IHByb3AudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICBpZiggcyBpbiB0YXJnZXQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0W3NdLCBzdHJ1Y3R1cmUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIHByb3AgPT09IFwidW5kZXJseWluZ1wiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJmcm9tUGF0aFwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgsIGNyZWF0ZSA9IGZhbHNlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gcmVjZWl2ZXIgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0eXBlb2YocGF0aCkgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KCcuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gcGF0aC5wb3AoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXRoLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBsYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHBhdGgucmV2ZXJzZSgpLnJlZHVjZSgobywgYywgaWR4KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtbY106IGlkeCA9PT0gMCA/IGxhc3QgOiBvfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LHt9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkTm9kZSA9ICggbGFzdCwgc3RlcCwgcHJldkxhc3QsIHByZXZTdGVwKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1bmRlcmx5aW5nID0gbGFzdC51bmRlcmx5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGFkZGluZyAke3N0ZXB9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheSh1bmRlcmx5aW5nICkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHVuZGVybHlpbmcubGVuZ3RoID09PSAwICYmIHByZXZMYXN0ICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggQXJyYXkuaXNBcnJheShwcmV2TGFzdCkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnIgPSBwcmV2TGFzdC51bmRlcmx5aW5nLmZpbmQoKGQpPT5PYmplY3Qua2V5cyhkKVswXSA9PSBwcmV2U3RlcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggYXJyICApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJbcHJldlN0ZXBdID0ge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2TGFzdC51bmRlcmx5aW5nW3ByZXZTdGVwXSA9IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gcHJldkxhc3RbcHJldlN0ZXBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nID0gbGFzdC51bmRlcmx5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nW3N0ZXBdID0gW11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nLnB1c2goe1tzdGVwXTogW119KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmdbc3RlcF0gPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJldkxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2U3RlcFxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoIHBhdGggaW5zdGFuY2VvZihPYmplY3QpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSBPYmplY3Qua2V5cyhwYXRoKVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoW3N0ZXBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGVbc3RlcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggbm9kZSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNyZWF0ZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGFkZE5vZGUoIGxhc3QsIHN0ZXAsIHByZXZMYXN0LCBwcmV2U3RlcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBsYXN0W3N0ZXBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZMYXN0ID0gbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZTdGVwID0gc3RlcFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFub2RlW3BhdGhdICYmIGNyZWF0ZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBhZGROb2RlKCBub2RlLCBwYXRoLCBwcmV2TGFzdCwgcHJldlN0ZXApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVtwYXRoXVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIG9iaiApe1xuICAgICAgICAgICAgICAgICAgICAvLyB3YXMgaGVyZVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJpdGVtc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5pZHMubWFwKChkKT0+b2JqLnByaW1pdGl2ZShkKSkuZmlsdGVyKChkKT0+ZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJhbGxJdGVtc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5hbGxJZHMubWFwKChkKT0+b2JqLnByaW1pdGl2ZShkKSkuZmlsdGVyKChkKT0+ZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVBbGxJdGVtc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci51bmlxdWVBbGxJZHMubWFwKChkKT0+b2JqLnByaW1pdGl2ZShkKSkuZmlsdGVyKChkKT0+ZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PT0gXCJ1bmlxdWVJdGVtc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci51bmlxdWVJZHMubWFwKChkKT0+b2JqLnByaW1pdGl2ZShkKSkuZmlsdGVyKChkKT0+ZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggb2JqLnR5cGVzLmluY2x1ZGVzKHByb3ApKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5pdGVtcy5maWx0ZXIoKHApPT5wLnR5cGU9PT1wcm9wKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wLnNsaWNlKDAsNikgPT09ICd1bmlxdWUnICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHByb3Auc2xpY2UoNikudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG9iai50eXBlcy5pbmNsdWRlcyh0eXBlKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLnVuaXF1ZUl0ZW1zLmZpbHRlcigocCk9PnAudHlwZSA9PT0gdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvcC5zbGljZSgwLDkpID09PSAnYWxsVW5pcXVlJyApe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBwcm9wLnNsaWNlKDkpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBvYmoudHlwZXMuaW5jbHVkZXModHlwZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci51bmlxdWVBbGxJdGVtcy5maWx0ZXIoKHApPT5wLnR5cGUgPT09IHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb3Auc2xpY2UoMCwzKSA9PT0gJ2FsbCcgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gcHJvcC5zbGljZSgzKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggb2JqLnR5cGVzLmluY2x1ZGVzKHR5cGUpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIuYWxsSXRlbXMuZmlsdGVyKChwKT0+cC50eXBlID09PSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCB0YXJnZXRbbnVsbF0pe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldFtudWxsXSwgc3RydWN0dXJlKVtwcm9wXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RydWN0dXJlXG4gICAgfSJdLCJtYXBwaW5ncyI6IjJvQ0FBZSxTQUFTQSxlQUFlQSxDQUFDQyxHQUFHLEVBQUM7RUFDeEMsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUlDLENBQUMsRUFBRztJQUNyQixPQUFPQSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxVQUFDQyxDQUFDLEVBQUNDLENBQUMsVUFBR0gsQ0FBQyxDQUFDSSxPQUFPLENBQUNGLENBQUMsQ0FBQyxLQUFLQyxDQUFDLEdBQUM7RUFDOUMsQ0FBQztFQUNELElBQU1FLFNBQVMsR0FBRztJQUNWQyxHQUFHLFdBQUFBLElBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUU7TUFDeEIsSUFBSUQsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNoQixPQUFPLFlBQVU7VUFDYixJQUFJRSxJQUFJLEdBQUdDLFNBQVMsQ0FBQyxDQUFDLENBQUM7VUFDdkIsSUFBSUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBTUMsSUFBSSxHQUFHSCxRQUFRLENBQUNJLFFBQVEsQ0FBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQzs7WUFFbEQsSUFBSSxDQUFDQyxJQUFJLEVBQUM7Y0FDTkUsT0FBTyxDQUFDQyxJQUFJLGtCQUFrQjtjQUM5QkQsT0FBTyxDQUFDRSxHQUFHLENBQUNKLElBQUksQ0FBQztjQUNqQixPQUFPSyxTQUFTO1lBQ3BCO1lBQ0EsT0FBT0wsSUFBSSxDQUFDTSxHQUFHLENBQUNSLElBQUksQ0FBQztVQUN6QjtVQUNBLElBQUksRUFBRUgsTUFBTSxZ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