"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _mongoose = _interopRequireDefault(require("mongoose"));var _Schema;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}
var Schema = _mongoose["default"].Schema,model = _mongoose["default"].model;
var ObjectId = _mongoose["default"].Types.ObjectId;

var primitiveSchema = new Schema((_Schema = {
  "type": String,
  "state": String,
  "plainId": Schema.Types.Number,
  "referenceId": Number,
  "resources": Schema.Types.Mixed,
  "primitives": Schema.Types.Mixed,
  "metrics": Schema.Types.Mixed,
  "referenceParameters": Schema.Types.Mixed,
  "users": Schema.Types.Mixed,
  "title": String,
  doDiscovery: Boolean }, _defineProperty(_Schema, "metrics",
Schema.Types.Mixed), _defineProperty(_Schema, "evidenceAggregate",
Schema.Types.Mixed), _defineProperty(_Schema, "evidencePrompts",
Schema.Types.Mixed), _defineProperty(_Schema, "comments",
[
{
  user: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'User'
  },
  date: Date,
  body: String
}]), _Schema),

{
  strict: false
});
var Primitive = model('Primitive', primitiveSchema);var _default =


Primitive;exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9TY2hlbWEiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiU2NoZW1hIiwibW9uZ29vc2UiLCJtb2RlbCIsIk9iamVjdElkIiwiVHlwZXMiLCJwcmltaXRpdmVTY2hlbWEiLCJNaXhlZCIsImRvRGlzY292ZXJ5IiwiQm9vbGVhbiIsInVzZXIiLCJ0eXBlIiwicmVmIiwiZGF0ZSIsIkRhdGUiLCJib2R5Iiwic3RyaWN0IiwiUHJpbWl0aXZlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL21vZGVsL1ByaW1pdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuY29uc3QgeyBTY2hlbWEsIG1vZGVsIH0gPSBtb25nb29zZTtcbmNvbnN0IE9iamVjdElkID0gbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWRcblxuY29uc3QgcHJpbWl0aXZlU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgXCJ0eXBlXCI6IFN0cmluZyxcbiAgICBcInN0YXRlXCI6IFN0cmluZyxcbiAgICBcInBsYWluSWRcIjogU2NoZW1hLlR5cGVzLk51bWJlcixcbiAgICBcInJlZmVyZW5jZUlkXCI6IE51bWJlcixcbiAgICBcInJlc291cmNlc1wiOiBTY2hlbWEuVHlwZXMuTWl4ZWQsXG4gICAgXCJwcmltaXRpdmVzXCI6IFNjaGVtYS5UeXBlcy5NaXhlZCxcbiAgICBcIm1ldHJpY3NcIjogU2NoZW1hLlR5cGVzLk1peGVkLFxuICAgIFwicmVmZXJlbmNlUGFyYW1ldGVyc1wiOiBTY2hlbWEuVHlwZXMuTWl4ZWQsXG4gICAgXCJ1c2Vyc1wiOiBTY2hlbWEuVHlwZXMuTWl4ZWQsXG4gICAgXCJ0aXRsZVwiOiBTdHJpbmcsXG4gICAgZG9EaXNjb3Zlcnk6IEJvb2xlYW4sXG4gICAgbWV0cmljczogU2NoZW1hLlR5cGVzLk1peGVkLFxuICAgIGV2aWRlbmNlQWdncmVnYXRlOiBTY2hlbWEuVHlwZXMuTWl4ZWQsXG4gICAgZXZpZGVuY2VQcm9tcHRzOiBTY2hlbWEuVHlwZXMuTWl4ZWQsXG4gICAgY29tbWVudHM6W1xuICAgICAgICB7XG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICAgICAgICAgIHJlZjogJ1VzZXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZTogRGF0ZSxcbiAgICAgICAgICAgIGJvZHk6IFN0cmluZ1xuICAgICAgICB9XG4gICAgXVxufSx7XG4gICAgc3RyaWN0OiBmYWxzZVxufSk7XG5jb25zdCBQcmltaXRpdmUgPSBtb2RlbCgnUHJpbWl0aXZlJywgcHJpbWl0aXZlU2NoZW1hKTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcmltaXRpdmU7Il0sIm1hcHBpbmdzIjoidUdBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBLGNBQWdDLElBQUFDLE9BQUEsVUFBQUYsdUJBQUFHLEdBQUEsVUFBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQSxhQUFBRSxRQUFBRixHQUFBLG9DQUFBRSxPQUFBLHdCQUFBQyxNQUFBLHVCQUFBQSxNQUFB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