"use strict";function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _express = _interopRequireDefault(require("express"));
var _path2 = _interopRequireDefault(require("path"));
var _cookieParser = _interopRequireDefault(require("cookie-parser"));
var _morgan = _interopRequireDefault(require("morgan"));
var _index = _interopRequireDefault(require("./routes/index"));
var _api = _interopRequireDefault(require("./routes/api"));
var _passport = _interopRequireDefault(require("passport"));
var _cookieSession = _interopRequireDefault(require("cookie-session"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _passportGoogleOauth = require("passport-google-oauth20");
var dotenv = _interopRequireWildcard(require("dotenv"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _User = _interopRequireDefault(require("./model/User"));
var _moment = _interopRequireDefault(require("moment"));
var refresh = _interopRequireWildcard(require("passport-oauth2-refresh"));
var _miroApi = require("@mirohq/miro-api");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { "default": obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj["default"] = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _regeneratorRuntime() {"use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime = function _regeneratorRuntime() {return exports;};var exports = {},Op = Object.prototype,hasOwn = Op.hasOwnProperty,defineProperty = Object.defineProperty || function (obj, key, desc) {obj[key] = desc.value;},$Symbol = "function" == typeof Symbol ? Symbol : {},iteratorSymbol = $Symbol.iterator || "@@iterator",asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";function define(obj, key, value) {return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key];}try {define({}, "");} catch (err) {define = function define(obj, key, value) {return obj[key] = value;};}function wrap(innerFn, outerFn, self, tryLocsList) {var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,generator = Object.create(protoGenerator.prototype),context = new Context(tryLocsList || []);return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator;}function tryCatch(fn, obj, arg) {try {return { type: "normal", arg: fn.call(obj, arg) };} catch (err) {return { type: "throw", arg: err };}}exports.wrap = wrap;var ContinueSentinel = {};function Generator() {}function GeneratorFunction() {}function GeneratorFunctionPrototype() {}var IteratorPrototype = {};define(IteratorPrototype, iteratorSymbol, function () {return this;});var getProto = Object.getPrototypeOf,NativeIteratorPrototype = getProto && getProto(getProto(values([])));NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);function defineIteratorMethods(prototype) {["next", "throw", "return"].forEach(function (method) {define(prototype, method, function (arg) {return this._invoke(method, arg);});});}function AsyncIterator(generator, PromiseImpl) {function invoke(method, arg, resolve, reject) {var record = tryCatch(generator[method], generator, arg);if ("throw" !== record.type) {var result = record.arg,value = result.value;return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {invoke("next", value, resolve, reject);}, function (err) {invoke("throw", err, resolve, reject);}) : PromiseImpl.resolve(value).then(function (unwrapped) {result.value = unwrapped, resolve(result);}, function (error) {return invoke("throw", error, resolve, reject);});}reject(record.arg);}var previousPromise;defineProperty(this, "_invoke", { value: function value(method, arg) {function callInvokeWithMethodAndArg() {return new PromiseImpl(function (resolve, reject) {invoke(method, arg, resolve, reject);});}return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();} });}function makeInvokeMethod(innerFn, self, context) {var state = "suspendedStart";return function (method, arg) {if ("executing" === state) throw new Error("Generator is already running");if ("completed" === state) {if ("throw" === method) throw arg;return doneResult();}for (context.method = method, context.arg = arg;;) {var delegate = context.delegate;if (delegate) {var delegateResult = maybeInvokeDelegate(delegate, context);if (delegateResult) {if (delegateResult === ContinueSentinel) continue;return delegateResult;}}if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {if ("suspendedStart" === state) throw state = "completed", context.arg;context.dispatchException(context.arg);} else "return" === context.method && context.abrupt("return", context.arg);state = "executing";var record = tryCatch(innerFn, self, context);if ("normal" === record.type) {if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;return { value: record.arg, done: context.done };}"throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);}};}function maybeInvokeDelegate(delegate, context) {var methodName = context.method,method = delegate.iterator[methodName];if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;var record = tryCatch(method, delegate.iterator, context.arg);if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;var info = record.arg;return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);}function pushTryEntry(locs) {var entry = { tryLoc: locs[0] };1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);}function resetTryEntry(entry) {var record = entry.completion || {};record.type = "normal", delete record.arg, entry.completion = record;}function Context(tryLocsList) {this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);}function values(iterable) {if (iterable) {var iteratorMethod = iterable[iteratorSymbol];if (iteratorMethod) return iteratorMethod.call(iterable);if ("function" == typeof iterable.next) return iterable;if (!isNaN(iterable.length)) {var i = -1,next = function next() {for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;return next.value = undefined, next.done = !0, next;};return next.next = next;}}return { next: doneResult };}function doneResult() {return { value: undefined, done: !0 };}return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {var ctor = "function" == typeof genFun && genFun.constructor;return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));}, exports.mark = function (genFun) {return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;}, exports.awrap = function (arg) {return { __await: arg };}, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {return this;}), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {void 0 === PromiseImpl && (PromiseImpl = Promise);var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {return result.done ? result.value : iter.next();});}, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {return this;}), define(Gp, "toString", function () {return "[object Generator]";}), exports.keys = function (val) {var object = Object(val),keys = [];for (var key in object) keys.push(key);return keys.reverse(), function next() {for (; keys.length;) {var key = keys.pop();if (key in object) return next.value = key, next.done = !1, next;}return next.done = !0, next;};}, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) {if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);}, stop: function stop() {this.done = !0;var rootRecord = this.tryEntries[0].completion;if ("throw" === rootRecord.type) throw rootRecord.arg;return this.rval;}, dispatchException: function dispatchException(exception) {if (this.done) throw exception;var context = this;function handle(loc, caught) {return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;}for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i],record = entry.completion;if ("root" === entry.tryLoc) return handle("end");if (entry.tryLoc <= this.prev) {var hasCatch = hasOwn.call(entry, "catchLoc"),hasFinally = hasOwn.call(entry, "finallyLoc");if (hasCatch && hasFinally) {if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);} else if (hasCatch) {if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);} else {if (!hasFinally) throw new Error("try statement without catch or finally");if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);}}}}, abrupt: function abrupt(type, arg) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {var finallyEntry = entry;break;}}finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);var record = finallyEntry ? finallyEntry.completion : {};return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);}, complete: function complete(record, afterLoc) {if ("throw" === record.type) throw record.arg;return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;}, finish: function finish(finallyLoc) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;}}, "catch": function _catch(tryLoc) {for (var i = this.tryEntries.length - 1; i >= 0; --i) {var entry = this.tryEntries[i];if (entry.tryLoc === tryLoc) {var record = entry.completion;if ("throw" === record.type) {var thrown = record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");}, delegateYield: function delegateYield(iterable, resultName, nextLoc) {return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel;} }, exports;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

dotenv.config();

var miro = new _miroApi.Miro();

_mongoose["default"].set('strictQuery', false);
_mongoose["default"].connect(process.env.MONGOOSE_URL);


_passport["default"].serializeUser(function (user, done) {
  done(null, user);
});

_passport["default"].deserializeUser(function (user, done) {
  done(null, user);
});

var strategy = new _passportGoogleOauth.Strategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_SECRET,
  callbackURL: process.env.GOOGLE_CALLBACK,
  passReqToCallback: true
},
function (request, accessToken, refreshToken, params, profile, done) {
  var expiry_date = (0, _moment["default"])().add(params.expires_in, "s").format("X");

  console.log(expiry_date);
  var user = {
    email: profile.emails[0].value,
    accessToken: accessToken,
    refreshToken: refreshToken,
    expiry_date: expiry_date
  };

  return done(null, user);
});


_passport["default"].use(strategy);
refresh.use(strategy);

var app = (0, _express["default"])();

app.use((0, _cookieSession["default"])({
  name: 'google-auth-session',
  keys: ['eman', 'monkey']
}));

// register regenerate & save after the cookieSession middleware initialization
app.use(function (request, response, next) {
  if (request.session && !request.session.regenerate) {
    request.session.regenerate = function (cb) {
      cb();
    };
  }
  if (request.session && !request.session.save) {
    request.session.save = function (cb) {
      cb();
    };
  }
  next();
});


app.use(_passport["default"].initialize());
app.use(_passport["default"].session());

app.use((0, _morgan["default"])('dev'));
app.use(_bodyParser["default"].urlencoded({ extended: true }));
app.use(_bodyParser["default"].json());
app.use(_bodyParser["default"].raw());
app.use(_express["default"].json());
app.use(_express["default"].urlencoded({ extended: false }));
app.use((0, _cookieParser["default"])());
app.use(_express["default"]["static"](_path2["default"].join(__dirname, '../public')));


app.get('/google/login',
_passport["default"].authenticate('google', {
  scope: ['email', 'profile', 'https://www.googleapis.com/auth/drive'],
  accessType: 'offline',
  prompt: 'consent'
  //prompt: 'select_account',
}));

app.get('/google/callback',
_passport["default"].authenticate('google', {
  failureRedirect: '/failed'
}),
function (req, res) {
  console.log(req.session);
  console.log("CHECKIN TO ".concat(req.session.returnTo));
  res.redirect(req.session.returnTo || '/');
  delete req.session.returnTo;

});

app.get("/google/logout", function (req, res) {
  req.user = undefined;
  req.logout(function (err) {
    if (err) {return next(err);}
    res.redirect('/google/login');
  });
});
app.get('/miro/callback', /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {var code, _req$session, _req$session$passport, _req$session$passport2, id;return _regeneratorRuntime().wrap(function _callee$(_context) {while (1) switch (_context.prev = _context.next) {case 0:_context.prev = 0;


          id = req === null || req === void 0 ? void 0 : (_req$session = req.session) === null || _req$session === void 0 ? void 0 : (_req$session$passport = _req$session.passport) === null || _req$session$passport === void 0 ? void 0 : (_req$session$passport2 = _req$session$passport.user) === null || _req$session$passport2 === void 0 ? void 0 : _req$session$passport2.email;
          console.log(req.session);
          console.log(id);_context.next = 6;return (
            miro.exchangeCodeForAccessToken(id, req.query.code));case 6:_context.next = 8;return (
            miro.getAccessToken(id));case 8:code = _context.sent;
          console.log(code);_context.next = 15;break;case 12:_context.prev = 12;_context.t0 = _context["catch"](0);


          console.log(_context.t0);case 15:

          res.redirect("/miro/catch/?code=" + encodeURIComponent(code));case 16:case "end":return _context.stop();}}, _callee, null, [[0, 12]]);}));return function (_x, _x2) {return _ref.apply(this, arguments);};}());



var checkToken = /*#__PURE__*/function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next) {var user, send401Response;return _regeneratorRuntime().wrap(function _callee2$(_context2) {while (1) switch (_context2.prev = _context2.next) {case 0:if (

          req.user) {_context2.next = 2;break;}return _context2.abrupt("return",
          next());case 2:if (

          req.user.refreshToken) {_context2.next = 7;break;}
          console.log("no token");
          console.log(req.user);
          res.redirect('/google/logout');return _context2.abrupt("return");case 7:


          user = req.user;

          send401Response = function send401Response() {
            return res.status(401).end();
          };

          // subtract current time from stored expiry_date and see if less than 5 minutes (300s) remain
          if (!((0, _moment["default"])().subtract(user.expiry_date, "s").format("X") > -300)) {_context2.next = 15;break;}
          console.log("NEED TO REFRESH with ".concat(user.refreshToken));_context2.next = 13;return (

            refresh.requestNewAccessToken('google', user.refreshToken, function (err, accessToken, refreshToken) {
              if (err || !accessToken) {
                console.log(err);
                return next(err);
              }
              req.user.accessToken = accessToken;
              req.user.expiry_date = (0, _moment["default"])().add(1000 * 60 * 60 * 24 * 7).format("X");
              next();
            }));case 13:_context2.next = 16;break;case 15:

          next();case 16:case "end":return _context2.stop();}}, _callee2);}));return function checkToken(_x3, _x4, _x5) {return _ref2.apply(this, arguments);};}();



app.use(checkToken);

app.get('/api/status', function (req, res) {
  if (req.user) {
    res.status(200).json({
      logged_in: true,
      user: req.user,
      env: {
        OPEN_API_KEY: process.env.OPEN_API_KEY,
        GOOGLE_API_KEY: process.env.GOOGLE_API_KEY,
        GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
        MIRO_CLIENT_ID: process.env.MIRO_CLIENT_ID,
        MIRO_CLIENT_SECRET: process.env.MIRO_CLIENT_SECRET,
        MIRO_REDIRECT_URL: process.env.MIRO_REDIRECT_URL,
        PROXYCURL_KEY: process.env.PROXYCURL_KEY
      }
    });
  } else {
    res.status(200).json({ logged_in: false });
  }
});

var ensureAuthenticated = /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res, next) {var user;return _regeneratorRuntime().wrap(function _callee3$(_context3) {while (1) switch (_context3.prev = _context3.next) {case 0:if (!
          req.isAuthenticated()) {_context3.next = 11;break;}_context3.next = 3;return (
            _User["default"].find({ email: req.user.email }));case 3:user = _context3.sent;if (!
          user) {_context3.next = 6;break;}return _context3.abrupt("return",
          next());case 6:

          req.session.returnTo = req.originalUrl;
          console.log("SET TO ".concat(req.session.returnTo));
          res.redirect('/google/login');_context3.next = 14;break;case 11:


          console.log("SET TO ".concat(req.session.returnTo));
          req.session.returnTo = req.originalUrl;
          res.redirect('/google/login');case 14:case "end":return _context3.stop();}}, _callee3);}));return function ensureAuthenticated(_x6, _x7, _x8) {return _ref3.apply(this, arguments);};}();



app.use(ensureAuthenticated);
app.use('/api', _api["default"]);

app.get("/google/failed", function (req, res) {
  res.send("Failed");
});

app.get('/miro/catch', /*#__PURE__*/function () {var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {return _regeneratorRuntime().wrap(function _callee4$(_context4) {while (1) switch (_context4.prev = _context4.next) {case 0:
          console.log(req.query.code);
          if (req.user) {
            req.user.miro = req.query.code;
          }
          res.redirect('/');case 3:case "end":return _context4.stop();}}, _callee4);}));return function (_x9, _x10) {return _ref4.apply(this, arguments);};}());



app.get('/miro/login', /*#__PURE__*/function () {var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {var _req$session2, _req$session2$passpor, _req$session2$passpor2;var id;return _regeneratorRuntime().wrap(function _callee5$(_context5) {while (1) switch (_context5.prev = _context5.next) {case 0:
          id = req === null || req === void 0 ? void 0 : (_req$session2 = req.session) === null || _req$session2 === void 0 ? void 0 : (_req$session2$passpor = _req$session2.passport) === null || _req$session2$passpor === void 0 ? void 0 : (_req$session2$passpor2 = _req$session2$passpor.user) === null || _req$session2$passpor2 === void 0 ? void 0 : _req$session2$passpor2.email;
          console.log(id);if (
          id) {_context5.next = 5;break;}
          res.redirect('/');return _context5.abrupt("return");case 5:_context5.next = 7;return (


            miro.isAuthorized(id));case 7:if (_context5.sent) {_context5.next = 10;break;}
          res.redirect(miro.getAuthUrl());return _context5.abrupt("return");case 10:case "end":return _context5.stop();}}, _callee5);}));return function (_x11, _x12) {return _ref5.apply(this, arguments);};}());





app.get('/api/refresh', /*#__PURE__*/function () {var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {var user;return _regeneratorRuntime().wrap(function _callee6$(_context6) {while (1) switch (_context6.prev = _context6.next) {case 0:
          user = req.user;_context6.next = 3;return (
            refresh.requestNewAccessToken('google', user.refreshToken, function (err, accessToken, refreshToken) {
              if (err || !accessToken) {
                console.log(err);
                res.status(403).json({
                  error: req.err
                });
                return next(err);
              }
              req.user.accessToken = accessToken;
              console.log(req.user.accessToken);
              console.log(accessToken);
              req.user.expiry_date = (0, _moment["default"])().add(1000 * 60 * 60 * 24 * 7).format("X");

              res.status(200).json({
                user: req.user
              });
            }));case 3:case "end":return _context6.stop();}}, _callee6);}));return function (_x13, _x14) {return _ref6.apply(this, arguments);};}());


if (process.env.NODE_ENV === 'production') {
  app.use(_express["default"]["static"]('ui/build'));

  var _path = require('path');
  app.get('*', function (req, res) {
    //res.sendFile(path.resolve(__dirname, 'ui', 'build', 'index.html'))
    res.sendFile(_path.resolve('dist-server', 'ui', 'build', 'index.html'));
  });
}var _default =


app;exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,